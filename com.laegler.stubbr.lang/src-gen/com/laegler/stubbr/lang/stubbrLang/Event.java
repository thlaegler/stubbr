/**
 * generated by Xtext 2.10.0
 */
package com.laegler.stubbr.lang.stubbrLang;

import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Event</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.Event#getEventType <em>Event Type</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.Event#getEventDefinitionType <em>Event Definition Type</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.Event#isNonInterrupting <em>Non Interrupting</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.Event#getDialog <em>Dialog</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.Event#getAttachments <em>Attachments</em>}</li>
 * </ul>
 *
 * @see com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage#getEvent()
 * @model
 * @generated
 */
public interface Event extends FlowNode, OptionFlowNode, InteractionNode
{
  /**
   * Returns the value of the '<em><b>Event Type</b></em>' attribute.
   * The literals are from the enumeration {@link com.laegler.stubbr.lang.stubbrLang.EventType}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Event Type</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Event Type</em>' attribute.
   * @see com.laegler.stubbr.lang.stubbrLang.EventType
   * @see #setEventType(EventType)
   * @see com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage#getEvent_EventType()
   * @model
   * @generated
   */
  EventType getEventType();

  /**
   * Sets the value of the '{@link com.laegler.stubbr.lang.stubbrLang.Event#getEventType <em>Event Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Event Type</em>' attribute.
   * @see com.laegler.stubbr.lang.stubbrLang.EventType
   * @see #getEventType()
   * @generated
   */
  void setEventType(EventType value);

  /**
   * Returns the value of the '<em><b>Event Definition Type</b></em>' attribute.
   * The literals are from the enumeration {@link com.laegler.stubbr.lang.stubbrLang.EventDefinitionType}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Event Definition Type</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Event Definition Type</em>' attribute.
   * @see com.laegler.stubbr.lang.stubbrLang.EventDefinitionType
   * @see #setEventDefinitionType(EventDefinitionType)
   * @see com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage#getEvent_EventDefinitionType()
   * @model
   * @generated
   */
  EventDefinitionType getEventDefinitionType();

  /**
   * Sets the value of the '{@link com.laegler.stubbr.lang.stubbrLang.Event#getEventDefinitionType <em>Event Definition Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Event Definition Type</em>' attribute.
   * @see com.laegler.stubbr.lang.stubbrLang.EventDefinitionType
   * @see #getEventDefinitionType()
   * @generated
   */
  void setEventDefinitionType(EventDefinitionType value);

  /**
   * Returns the value of the '<em><b>Non Interrupting</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Non Interrupting</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Non Interrupting</em>' attribute.
   * @see #setNonInterrupting(boolean)
   * @see com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage#getEvent_NonInterrupting()
   * @model
   * @generated
   */
  boolean isNonInterrupting();

  /**
   * Sets the value of the '{@link com.laegler.stubbr.lang.stubbrLang.Event#isNonInterrupting <em>Non Interrupting</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Non Interrupting</em>' attribute.
   * @see #isNonInterrupting()
   * @generated
   */
  void setNonInterrupting(boolean value);

  /**
   * Returns the value of the '<em><b>Dialog</b></em>' reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Dialog</em>' reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Dialog</em>' reference.
   * @see #setDialog(View)
   * @see com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage#getEvent_Dialog()
   * @model
   * @generated
   */
  View getDialog();

  /**
   * Sets the value of the '{@link com.laegler.stubbr.lang.stubbrLang.Event#getDialog <em>Dialog</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Dialog</em>' reference.
   * @see #getDialog()
   * @generated
   */
  void setDialog(View value);

  /**
   * Returns the value of the '<em><b>Attachments</b></em>' containment reference list.
   * The list contents are of type {@link com.laegler.stubbr.lang.stubbrLang.Attachment}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Attachments</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Attachments</em>' containment reference list.
   * @see com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage#getEvent_Attachments()
   * @model containment="true"
   * @generated
   */
  EList<Attachment> getAttachments();

} // Event
