/**
 * generated by Xtext 2.10.0
 */
package com.laegler.stubbr.lang.stubbrLang.impl;

import com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage;
import com.laegler.stubbr.lang.stubbrLang.Styling;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Styling</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.StylingImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.StylingImpl#getLabel <em>Label</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.StylingImpl#getDocumentation <em>Documentation</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.StylingImpl#getBaseColor <em>Base Color</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.StylingImpl#getHighLightColor <em>High Light Color</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.StylingImpl#getTextColor <em>Text Color</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.StylingImpl#getFontSize <em>Font Size</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StylingImpl extends MinimalEObjectImpl.Container implements Styling
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getLabel() <em>Label</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabel()
   * @generated
   * @ordered
   */
  protected static final String LABEL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLabel() <em>Label</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabel()
   * @generated
   * @ordered
   */
  protected String label = LABEL_EDEFAULT;

  /**
   * The default value of the '{@link #getDocumentation() <em>Documentation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDocumentation()
   * @generated
   * @ordered
   */
  protected static final String DOCUMENTATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDocumentation() <em>Documentation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDocumentation()
   * @generated
   * @ordered
   */
  protected String documentation = DOCUMENTATION_EDEFAULT;

  /**
   * The default value of the '{@link #getBaseColor() <em>Base Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBaseColor()
   * @generated
   * @ordered
   */
  protected static final String BASE_COLOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBaseColor() <em>Base Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBaseColor()
   * @generated
   * @ordered
   */
  protected String baseColor = BASE_COLOR_EDEFAULT;

  /**
   * The default value of the '{@link #getHighLightColor() <em>High Light Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHighLightColor()
   * @generated
   * @ordered
   */
  protected static final String HIGH_LIGHT_COLOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getHighLightColor() <em>High Light Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHighLightColor()
   * @generated
   * @ordered
   */
  protected String highLightColor = HIGH_LIGHT_COLOR_EDEFAULT;

  /**
   * The default value of the '{@link #getTextColor() <em>Text Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTextColor()
   * @generated
   * @ordered
   */
  protected static final String TEXT_COLOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTextColor() <em>Text Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTextColor()
   * @generated
   * @ordered
   */
  protected String textColor = TEXT_COLOR_EDEFAULT;

  /**
   * The default value of the '{@link #getFontSize() <em>Font Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFontSize()
   * @generated
   * @ordered
   */
  protected static final String FONT_SIZE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFontSize() <em>Font Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFontSize()
   * @generated
   * @ordered
   */
  protected String fontSize = FONT_SIZE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StylingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StubbrLangPackage.eINSTANCE.getStyling();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.STYLING__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLabel()
  {
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLabel(String newLabel)
  {
    String oldLabel = label;
    label = newLabel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.STYLING__LABEL, oldLabel, label));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDocumentation()
  {
    return documentation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDocumentation(String newDocumentation)
  {
    String oldDocumentation = documentation;
    documentation = newDocumentation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.STYLING__DOCUMENTATION, oldDocumentation, documentation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getBaseColor()
  {
    return baseColor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBaseColor(String newBaseColor)
  {
    String oldBaseColor = baseColor;
    baseColor = newBaseColor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.STYLING__BASE_COLOR, oldBaseColor, baseColor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getHighLightColor()
  {
    return highLightColor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHighLightColor(String newHighLightColor)
  {
    String oldHighLightColor = highLightColor;
    highLightColor = newHighLightColor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.STYLING__HIGH_LIGHT_COLOR, oldHighLightColor, highLightColor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTextColor()
  {
    return textColor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTextColor(String newTextColor)
  {
    String oldTextColor = textColor;
    textColor = newTextColor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.STYLING__TEXT_COLOR, oldTextColor, textColor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getFontSize()
  {
    return fontSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFontSize(String newFontSize)
  {
    String oldFontSize = fontSize;
    fontSize = newFontSize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.STYLING__FONT_SIZE, oldFontSize, fontSize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StubbrLangPackage.STYLING__NAME:
        return getName();
      case StubbrLangPackage.STYLING__LABEL:
        return getLabel();
      case StubbrLangPackage.STYLING__DOCUMENTATION:
        return getDocumentation();
      case StubbrLangPackage.STYLING__BASE_COLOR:
        return getBaseColor();
      case StubbrLangPackage.STYLING__HIGH_LIGHT_COLOR:
        return getHighLightColor();
      case StubbrLangPackage.STYLING__TEXT_COLOR:
        return getTextColor();
      case StubbrLangPackage.STYLING__FONT_SIZE:
        return getFontSize();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StubbrLangPackage.STYLING__NAME:
        setName((String)newValue);
        return;
      case StubbrLangPackage.STYLING__LABEL:
        setLabel((String)newValue);
        return;
      case StubbrLangPackage.STYLING__DOCUMENTATION:
        setDocumentation((String)newValue);
        return;
      case StubbrLangPackage.STYLING__BASE_COLOR:
        setBaseColor((String)newValue);
        return;
      case StubbrLangPackage.STYLING__HIGH_LIGHT_COLOR:
        setHighLightColor((String)newValue);
        return;
      case StubbrLangPackage.STYLING__TEXT_COLOR:
        setTextColor((String)newValue);
        return;
      case StubbrLangPackage.STYLING__FONT_SIZE:
        setFontSize((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StubbrLangPackage.STYLING__NAME:
        setName(NAME_EDEFAULT);
        return;
      case StubbrLangPackage.STYLING__LABEL:
        setLabel(LABEL_EDEFAULT);
        return;
      case StubbrLangPackage.STYLING__DOCUMENTATION:
        setDocumentation(DOCUMENTATION_EDEFAULT);
        return;
      case StubbrLangPackage.STYLING__BASE_COLOR:
        setBaseColor(BASE_COLOR_EDEFAULT);
        return;
      case StubbrLangPackage.STYLING__HIGH_LIGHT_COLOR:
        setHighLightColor(HIGH_LIGHT_COLOR_EDEFAULT);
        return;
      case StubbrLangPackage.STYLING__TEXT_COLOR:
        setTextColor(TEXT_COLOR_EDEFAULT);
        return;
      case StubbrLangPackage.STYLING__FONT_SIZE:
        setFontSize(FONT_SIZE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StubbrLangPackage.STYLING__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case StubbrLangPackage.STYLING__LABEL:
        return LABEL_EDEFAULT == null ? label != null : !LABEL_EDEFAULT.equals(label);
      case StubbrLangPackage.STYLING__DOCUMENTATION:
        return DOCUMENTATION_EDEFAULT == null ? documentation != null : !DOCUMENTATION_EDEFAULT.equals(documentation);
      case StubbrLangPackage.STYLING__BASE_COLOR:
        return BASE_COLOR_EDEFAULT == null ? baseColor != null : !BASE_COLOR_EDEFAULT.equals(baseColor);
      case StubbrLangPackage.STYLING__HIGH_LIGHT_COLOR:
        return HIGH_LIGHT_COLOR_EDEFAULT == null ? highLightColor != null : !HIGH_LIGHT_COLOR_EDEFAULT.equals(highLightColor);
      case StubbrLangPackage.STYLING__TEXT_COLOR:
        return TEXT_COLOR_EDEFAULT == null ? textColor != null : !TEXT_COLOR_EDEFAULT.equals(textColor);
      case StubbrLangPackage.STYLING__FONT_SIZE:
        return FONT_SIZE_EDEFAULT == null ? fontSize != null : !FONT_SIZE_EDEFAULT.equals(fontSize);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", label: ");
    result.append(label);
    result.append(", documentation: ");
    result.append(documentation);
    result.append(", baseColor: ");
    result.append(baseColor);
    result.append(", highLightColor: ");
    result.append(highLightColor);
    result.append(", textColor: ");
    result.append(textColor);
    result.append(", fontSize: ");
    result.append(fontSize);
    result.append(')');
    return result.toString();
  }

} //StylingImpl
