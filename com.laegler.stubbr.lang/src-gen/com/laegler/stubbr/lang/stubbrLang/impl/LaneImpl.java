/**
 * generated by Xtext 2.10.0
 */
package com.laegler.stubbr.lang.stubbrLang.impl;

import com.laegler.stubbr.lang.stubbrLang.FlowNode;
import com.laegler.stubbr.lang.stubbrLang.Lane;
import com.laegler.stubbr.lang.stubbrLang.Stakeholder;
import com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Lane</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.LaneImpl#getDocumentation <em>Documentation</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.LaneImpl#getActor <em>Actor</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.LaneImpl#isInitializing <em>Initializing</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.LaneImpl#getFlowNodes <em>Flow Nodes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LaneImpl extends FlowNodeImpl implements Lane
{
  /**
   * The default value of the '{@link #getDocumentation() <em>Documentation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDocumentation()
   * @generated
   * @ordered
   */
  protected static final String DOCUMENTATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDocumentation() <em>Documentation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDocumentation()
   * @generated
   * @ordered
   */
  protected String documentation = DOCUMENTATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getActor() <em>Actor</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActor()
   * @generated
   * @ordered
   */
  protected Stakeholder actor;

  /**
   * The default value of the '{@link #isInitializing() <em>Initializing</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInitializing()
   * @generated
   * @ordered
   */
  protected static final boolean INITIALIZING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isInitializing() <em>Initializing</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInitializing()
   * @generated
   * @ordered
   */
  protected boolean initializing = INITIALIZING_EDEFAULT;

  /**
   * The cached value of the '{@link #getFlowNodes() <em>Flow Nodes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlowNodes()
   * @generated
   * @ordered
   */
  protected EList<FlowNode> flowNodes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LaneImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StubbrLangPackage.eINSTANCE.getLane();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDocumentation()
  {
    return documentation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDocumentation(String newDocumentation)
  {
    String oldDocumentation = documentation;
    documentation = newDocumentation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.LANE__DOCUMENTATION, oldDocumentation, documentation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Stakeholder getActor()
  {
    if (actor != null && actor.eIsProxy())
    {
      InternalEObject oldActor = (InternalEObject)actor;
      actor = (Stakeholder)eResolveProxy(oldActor);
      if (actor != oldActor)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, StubbrLangPackage.LANE__ACTOR, oldActor, actor));
      }
    }
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Stakeholder basicGetActor()
  {
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setActor(Stakeholder newActor)
  {
    Stakeholder oldActor = actor;
    actor = newActor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.LANE__ACTOR, oldActor, actor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isInitializing()
  {
    return initializing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInitializing(boolean newInitializing)
  {
    boolean oldInitializing = initializing;
    initializing = newInitializing;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.LANE__INITIALIZING, oldInitializing, initializing));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FlowNode> getFlowNodes()
  {
    if (flowNodes == null)
    {
      flowNodes = new EObjectContainmentEList<FlowNode>(FlowNode.class, this, StubbrLangPackage.LANE__FLOW_NODES);
    }
    return flowNodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case StubbrLangPackage.LANE__FLOW_NODES:
        return ((InternalEList<?>)getFlowNodes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StubbrLangPackage.LANE__DOCUMENTATION:
        return getDocumentation();
      case StubbrLangPackage.LANE__ACTOR:
        if (resolve) return getActor();
        return basicGetActor();
      case StubbrLangPackage.LANE__INITIALIZING:
        return isInitializing();
      case StubbrLangPackage.LANE__FLOW_NODES:
        return getFlowNodes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StubbrLangPackage.LANE__DOCUMENTATION:
        setDocumentation((String)newValue);
        return;
      case StubbrLangPackage.LANE__ACTOR:
        setActor((Stakeholder)newValue);
        return;
      case StubbrLangPackage.LANE__INITIALIZING:
        setInitializing((Boolean)newValue);
        return;
      case StubbrLangPackage.LANE__FLOW_NODES:
        getFlowNodes().clear();
        getFlowNodes().addAll((Collection<? extends FlowNode>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StubbrLangPackage.LANE__DOCUMENTATION:
        setDocumentation(DOCUMENTATION_EDEFAULT);
        return;
      case StubbrLangPackage.LANE__ACTOR:
        setActor((Stakeholder)null);
        return;
      case StubbrLangPackage.LANE__INITIALIZING:
        setInitializing(INITIALIZING_EDEFAULT);
        return;
      case StubbrLangPackage.LANE__FLOW_NODES:
        getFlowNodes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StubbrLangPackage.LANE__DOCUMENTATION:
        return DOCUMENTATION_EDEFAULT == null ? documentation != null : !DOCUMENTATION_EDEFAULT.equals(documentation);
      case StubbrLangPackage.LANE__ACTOR:
        return actor != null;
      case StubbrLangPackage.LANE__INITIALIZING:
        return initializing != INITIALIZING_EDEFAULT;
      case StubbrLangPackage.LANE__FLOW_NODES:
        return flowNodes != null && !flowNodes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (documentation: ");
    result.append(documentation);
    result.append(", initializing: ");
    result.append(initializing);
    result.append(')');
    return result.toString();
  }

} //LaneImpl
