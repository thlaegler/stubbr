/**
 * generated by Xtext 2.10.0
 */
package com.laegler.stubbr.lang.stubbrLang.impl;

import com.laegler.stubbr.lang.stubbrLang.DiEdge;
import com.laegler.stubbr.lang.stubbrLang.DiShape;
import com.laegler.stubbr.lang.stubbrLang.DiWaypoint;
import com.laegler.stubbr.lang.stubbrLang.SequenceFlow;
import com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Di Edge</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.DiEdgeImpl#getSequenceFlow <em>Sequence Flow</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.DiEdgeImpl#getSourceDiagramShape <em>Source Diagram Shape</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.DiEdgeImpl#getTargetDiagramShape <em>Target Diagram Shape</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.DiEdgeImpl#getWaypoints <em>Waypoints</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DiEdgeImpl extends DiPlaneElementImpl implements DiEdge
{
  /**
   * The cached value of the '{@link #getSequenceFlow() <em>Sequence Flow</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSequenceFlow()
   * @generated
   * @ordered
   */
  protected SequenceFlow sequenceFlow;

  /**
   * The cached value of the '{@link #getSourceDiagramShape() <em>Source Diagram Shape</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSourceDiagramShape()
   * @generated
   * @ordered
   */
  protected DiShape sourceDiagramShape;

  /**
   * The cached value of the '{@link #getTargetDiagramShape() <em>Target Diagram Shape</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTargetDiagramShape()
   * @generated
   * @ordered
   */
  protected DiShape targetDiagramShape;

  /**
   * The cached value of the '{@link #getWaypoints() <em>Waypoints</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWaypoints()
   * @generated
   * @ordered
   */
  protected EList<DiWaypoint> waypoints;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DiEdgeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StubbrLangPackage.eINSTANCE.getDiEdge();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SequenceFlow getSequenceFlow()
  {
    if (sequenceFlow != null && sequenceFlow.eIsProxy())
    {
      InternalEObject oldSequenceFlow = (InternalEObject)sequenceFlow;
      sequenceFlow = (SequenceFlow)eResolveProxy(oldSequenceFlow);
      if (sequenceFlow != oldSequenceFlow)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, StubbrLangPackage.DI_EDGE__SEQUENCE_FLOW, oldSequenceFlow, sequenceFlow));
      }
    }
    return sequenceFlow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SequenceFlow basicGetSequenceFlow()
  {
    return sequenceFlow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSequenceFlow(SequenceFlow newSequenceFlow)
  {
    SequenceFlow oldSequenceFlow = sequenceFlow;
    sequenceFlow = newSequenceFlow;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.DI_EDGE__SEQUENCE_FLOW, oldSequenceFlow, sequenceFlow));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiShape getSourceDiagramShape()
  {
    if (sourceDiagramShape != null && sourceDiagramShape.eIsProxy())
    {
      InternalEObject oldSourceDiagramShape = (InternalEObject)sourceDiagramShape;
      sourceDiagramShape = (DiShape)eResolveProxy(oldSourceDiagramShape);
      if (sourceDiagramShape != oldSourceDiagramShape)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, StubbrLangPackage.DI_EDGE__SOURCE_DIAGRAM_SHAPE, oldSourceDiagramShape, sourceDiagramShape));
      }
    }
    return sourceDiagramShape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiShape basicGetSourceDiagramShape()
  {
    return sourceDiagramShape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSourceDiagramShape(DiShape newSourceDiagramShape)
  {
    DiShape oldSourceDiagramShape = sourceDiagramShape;
    sourceDiagramShape = newSourceDiagramShape;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.DI_EDGE__SOURCE_DIAGRAM_SHAPE, oldSourceDiagramShape, sourceDiagramShape));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiShape getTargetDiagramShape()
  {
    if (targetDiagramShape != null && targetDiagramShape.eIsProxy())
    {
      InternalEObject oldTargetDiagramShape = (InternalEObject)targetDiagramShape;
      targetDiagramShape = (DiShape)eResolveProxy(oldTargetDiagramShape);
      if (targetDiagramShape != oldTargetDiagramShape)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, StubbrLangPackage.DI_EDGE__TARGET_DIAGRAM_SHAPE, oldTargetDiagramShape, targetDiagramShape));
      }
    }
    return targetDiagramShape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiShape basicGetTargetDiagramShape()
  {
    return targetDiagramShape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTargetDiagramShape(DiShape newTargetDiagramShape)
  {
    DiShape oldTargetDiagramShape = targetDiagramShape;
    targetDiagramShape = newTargetDiagramShape;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.DI_EDGE__TARGET_DIAGRAM_SHAPE, oldTargetDiagramShape, targetDiagramShape));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<DiWaypoint> getWaypoints()
  {
    if (waypoints == null)
    {
      waypoints = new EObjectContainmentEList<DiWaypoint>(DiWaypoint.class, this, StubbrLangPackage.DI_EDGE__WAYPOINTS);
    }
    return waypoints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case StubbrLangPackage.DI_EDGE__WAYPOINTS:
        return ((InternalEList<?>)getWaypoints()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StubbrLangPackage.DI_EDGE__SEQUENCE_FLOW:
        if (resolve) return getSequenceFlow();
        return basicGetSequenceFlow();
      case StubbrLangPackage.DI_EDGE__SOURCE_DIAGRAM_SHAPE:
        if (resolve) return getSourceDiagramShape();
        return basicGetSourceDiagramShape();
      case StubbrLangPackage.DI_EDGE__TARGET_DIAGRAM_SHAPE:
        if (resolve) return getTargetDiagramShape();
        return basicGetTargetDiagramShape();
      case StubbrLangPackage.DI_EDGE__WAYPOINTS:
        return getWaypoints();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StubbrLangPackage.DI_EDGE__SEQUENCE_FLOW:
        setSequenceFlow((SequenceFlow)newValue);
        return;
      case StubbrLangPackage.DI_EDGE__SOURCE_DIAGRAM_SHAPE:
        setSourceDiagramShape((DiShape)newValue);
        return;
      case StubbrLangPackage.DI_EDGE__TARGET_DIAGRAM_SHAPE:
        setTargetDiagramShape((DiShape)newValue);
        return;
      case StubbrLangPackage.DI_EDGE__WAYPOINTS:
        getWaypoints().clear();
        getWaypoints().addAll((Collection<? extends DiWaypoint>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StubbrLangPackage.DI_EDGE__SEQUENCE_FLOW:
        setSequenceFlow((SequenceFlow)null);
        return;
      case StubbrLangPackage.DI_EDGE__SOURCE_DIAGRAM_SHAPE:
        setSourceDiagramShape((DiShape)null);
        return;
      case StubbrLangPackage.DI_EDGE__TARGET_DIAGRAM_SHAPE:
        setTargetDiagramShape((DiShape)null);
        return;
      case StubbrLangPackage.DI_EDGE__WAYPOINTS:
        getWaypoints().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StubbrLangPackage.DI_EDGE__SEQUENCE_FLOW:
        return sequenceFlow != null;
      case StubbrLangPackage.DI_EDGE__SOURCE_DIAGRAM_SHAPE:
        return sourceDiagramShape != null;
      case StubbrLangPackage.DI_EDGE__TARGET_DIAGRAM_SHAPE:
        return targetDiagramShape != null;
      case StubbrLangPackage.DI_EDGE__WAYPOINTS:
        return waypoints != null && !waypoints.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //DiEdgeImpl
