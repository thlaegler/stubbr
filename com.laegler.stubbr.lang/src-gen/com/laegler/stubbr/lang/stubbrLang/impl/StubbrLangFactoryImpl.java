/**
 * generated by Xtext 2.10.0
 */
package com.laegler.stubbr.lang.stubbrLang.impl;

import com.laegler.stubbr.lang.stubbrLang.Activity;
import com.laegler.stubbr.lang.stubbrLang.Address;
import com.laegler.stubbr.lang.stubbrLang.Annotation;
import com.laegler.stubbr.lang.stubbrLang.Attachment;
import com.laegler.stubbr.lang.stubbrLang.Attribute;
import com.laegler.stubbr.lang.stubbrLang.BaseTypeEnum;
import com.laegler.stubbr.lang.stubbrLang.BehaviorAction;
import com.laegler.stubbr.lang.stubbrLang.Birthday;
import com.laegler.stubbr.lang.stubbrLang.BusinessProcess;
import com.laegler.stubbr.lang.stubbrLang.Button;
import com.laegler.stubbr.lang.stubbrLang.CallActivity;
import com.laegler.stubbr.lang.stubbrLang.Chapter;
import com.laegler.stubbr.lang.stubbrLang.ChapterBehavior;
import com.laegler.stubbr.lang.stubbrLang.ChapterBusinessProcesses;
import com.laegler.stubbr.lang.stubbrLang.ChapterEnvironment;
import com.laegler.stubbr.lang.stubbrLang.ChapterGlobals;
import com.laegler.stubbr.lang.stubbrLang.ChapterPersistence;
import com.laegler.stubbr.lang.stubbrLang.ChapterPresentation;
import com.laegler.stubbr.lang.stubbrLang.ChapterProjectManagement;
import com.laegler.stubbr.lang.stubbrLang.ChapterProjectStructure;
import com.laegler.stubbr.lang.stubbrLang.ChapterStakeholder;
import com.laegler.stubbr.lang.stubbrLang.ChapterTesting;
import com.laegler.stubbr.lang.stubbrLang.ChapterWebservice;
import com.laegler.stubbr.lang.stubbrLang.CheckBoxGroup;
import com.laegler.stubbr.lang.stubbrLang.DataIO;
import com.laegler.stubbr.lang.stubbrLang.DataIOType;
import com.laegler.stubbr.lang.stubbrLang.Database;
import com.laegler.stubbr.lang.stubbrLang.DatabaseEnum;
import com.laegler.stubbr.lang.stubbrLang.DevProject;
import com.laegler.stubbr.lang.stubbrLang.DevProjectType;
import com.laegler.stubbr.lang.stubbrLang.DiBounds;
import com.laegler.stubbr.lang.stubbrLang.DiDiagram;
import com.laegler.stubbr.lang.stubbrLang.DiDiagramElement;
import com.laegler.stubbr.lang.stubbrLang.DiEdge;
import com.laegler.stubbr.lang.stubbrLang.DiPlane;
import com.laegler.stubbr.lang.stubbrLang.DiPlaneElement;
import com.laegler.stubbr.lang.stubbrLang.DiShape;
import com.laegler.stubbr.lang.stubbrLang.DiWaypoint;
import com.laegler.stubbr.lang.stubbrLang.Documentation;
import com.laegler.stubbr.lang.stubbrLang.EditorType;
import com.laegler.stubbr.lang.stubbrLang.Element;
import com.laegler.stubbr.lang.stubbrLang.Entity;
import com.laegler.stubbr.lang.stubbrLang.Enumeration;
import com.laegler.stubbr.lang.stubbrLang.Event;
import com.laegler.stubbr.lang.stubbrLang.EventDefinitionType;
import com.laegler.stubbr.lang.stubbrLang.EventType;
import com.laegler.stubbr.lang.stubbrLang.Feature;
import com.laegler.stubbr.lang.stubbrLang.Flow;
import com.laegler.stubbr.lang.stubbrLang.FlowNode;
import com.laegler.stubbr.lang.stubbrLang.FormatType;
import com.laegler.stubbr.lang.stubbrLang.Gateway;
import com.laegler.stubbr.lang.stubbrLang.GatewayConverging;
import com.laegler.stubbr.lang.stubbrLang.GatewayDiverging;
import com.laegler.stubbr.lang.stubbrLang.GatewayType;
import com.laegler.stubbr.lang.stubbrLang.GivenStep;
import com.laegler.stubbr.lang.stubbrLang.Group;
import com.laegler.stubbr.lang.stubbrLang.InputField;
import com.laegler.stubbr.lang.stubbrLang.InteractionNode;
import com.laegler.stubbr.lang.stubbrLang.JvmEnum;
import com.laegler.stubbr.lang.stubbrLang.Lane;
import com.laegler.stubbr.lang.stubbrLang.Layout;
import com.laegler.stubbr.lang.stubbrLang.Level1Attribute;
import com.laegler.stubbr.lang.stubbrLang.ListView;
import com.laegler.stubbr.lang.stubbrLang.Locale;
import com.laegler.stubbr.lang.stubbrLang.ModelType;
import com.laegler.stubbr.lang.stubbrLang.Name;
import com.laegler.stubbr.lang.stubbrLang.Option;
import com.laegler.stubbr.lang.stubbrLang.OptionFlowNode;
import com.laegler.stubbr.lang.stubbrLang.Organization;
import com.laegler.stubbr.lang.stubbrLang.OutputText;
import com.laegler.stubbr.lang.stubbrLang.Person;
import com.laegler.stubbr.lang.stubbrLang.Pool;
import com.laegler.stubbr.lang.stubbrLang.Poool;
import com.laegler.stubbr.lang.stubbrLang.RadioButtonGroup;
import com.laegler.stubbr.lang.stubbrLang.Relationship;
import com.laegler.stubbr.lang.stubbrLang.RestLanguage;
import com.laegler.stubbr.lang.stubbrLang.RestWebservice;
import com.laegler.stubbr.lang.stubbrLang.Role;
import com.laegler.stubbr.lang.stubbrLang.Scenario;
import com.laegler.stubbr.lang.stubbrLang.SendData;
import com.laegler.stubbr.lang.stubbrLang.SendMessage;
import com.laegler.stubbr.lang.stubbrLang.SequenceFlow;
import com.laegler.stubbr.lang.stubbrLang.SoapWebservice;
import com.laegler.stubbr.lang.stubbrLang.Stakeholder;
import com.laegler.stubbr.lang.stubbrLang.Step;
import com.laegler.stubbr.lang.stubbrLang.Stubb;
import com.laegler.stubbr.lang.stubbrLang.StubbrLangFactory;
import com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage;
import com.laegler.stubbr.lang.stubbrLang.Styling;
import com.laegler.stubbr.lang.stubbrLang.SubProcess;
import com.laegler.stubbr.lang.stubbrLang.Task;
import com.laegler.stubbr.lang.stubbrLang.TaskType;
import com.laegler.stubbr.lang.stubbrLang.ThenStep;
import com.laegler.stubbr.lang.stubbrLang.Transition;
import com.laegler.stubbr.lang.stubbrLang.UiElement;
import com.laegler.stubbr.lang.stubbrLang.UiFramework;
import com.laegler.stubbr.lang.stubbrLang.Upload;
import com.laegler.stubbr.lang.stubbrLang.View;
import com.laegler.stubbr.lang.stubbrLang.Webservice;
import com.laegler.stubbr.lang.stubbrLang.WhenStep;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class StubbrLangFactoryImpl extends EFactoryImpl implements StubbrLangFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static StubbrLangFactory init()
  {
    try
    {
      StubbrLangFactory theStubbrLangFactory = (StubbrLangFactory)EPackage.Registry.INSTANCE.getEFactory(StubbrLangPackage.eNS_URI);
      if (theStubbrLangFactory != null)
      {
        return theStubbrLangFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new StubbrLangFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StubbrLangFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case StubbrLangPackage.STUBB: return createStubb();
      case StubbrLangPackage.CHAPTER: return createChapter();
      case StubbrLangPackage.CHAPTER_GLOBALS: return createChapterGlobals();
      case StubbrLangPackage.CHAPTER_PROJECT_MANAGEMENT: return createChapterProjectManagement();
      case StubbrLangPackage.DEV_PROJECT: return createDevProject();
      case StubbrLangPackage.CHAPTER_PROJECT_STRUCTURE: return createChapterProjectStructure();
      case StubbrLangPackage.CHAPTER_PERSISTENCE: return createChapterPersistence();
      case StubbrLangPackage.CHAPTER_TESTING: return createChapterTesting();
      case StubbrLangPackage.CHAPTER_STAKEHOLDER: return createChapterStakeholder();
      case StubbrLangPackage.STAKEHOLDER: return createStakeholder();
      case StubbrLangPackage.ORGANIZATION: return createOrganization();
      case StubbrLangPackage.GROUP: return createGroup();
      case StubbrLangPackage.ROLE: return createRole();
      case StubbrLangPackage.PERSON: return createPerson();
      case StubbrLangPackage.CHAPTER_ENVIRONMENT: return createChapterEnvironment();
      case StubbrLangPackage.RUNTIME: return createRuntime();
      case StubbrLangPackage.DATABASE: return createDatabase();
      case StubbrLangPackage.ENTITY: return createEntity();
      case StubbrLangPackage.ENUMERATION: return createEnumeration();
      case StubbrLangPackage.ATTRIBUTE: return createAttribute();
      case StubbrLangPackage.RELATIONSHIP: return createRelationship();
      case StubbrLangPackage.LEVEL1_ATTRIBUTE: return createLevel1Attribute();
      case StubbrLangPackage.CHAPTER_BUSINESS_PROCESSES: return createChapterBusinessProcesses();
      case StubbrLangPackage.BUSINESS_PROCESS: return createBusinessProcess();
      case StubbrLangPackage.POOL: return createPool();
      case StubbrLangPackage.FLOW_NODE: return createFlowNode();
      case StubbrLangPackage.LANE: return createLane();
      case StubbrLangPackage.EVENT: return createEvent();
      case StubbrLangPackage.ACTIVITY: return createActivity();
      case StubbrLangPackage.TASK: return createTask();
      case StubbrLangPackage.CALL_ACTIVITY: return createCallActivity();
      case StubbrLangPackage.SUB_PROCESS: return createSubProcess();
      case StubbrLangPackage.GATEWAY: return createGateway();
      case StubbrLangPackage.GATEWAY_DIVERGING: return createGatewayDiverging();
      case StubbrLangPackage.GATEWAY_CONVERGING: return createGatewayConverging();
      case StubbrLangPackage.OPTION_FLOW_NODE: return createOptionFlowNode();
      case StubbrLangPackage.OPTION: return createOption();
      case StubbrLangPackage.ATTACHMENT: return createAttachment();
      case StubbrLangPackage.INTERACTION_NODE: return createInteractionNode();
      case StubbrLangPackage.SEND_MESSAGE: return createSendMessage();
      case StubbrLangPackage.SEND_DATA: return createSendData();
      case StubbrLangPackage.DATA_IO: return createDataIO();
      case StubbrLangPackage.ANNOTATION: return createAnnotation();
      case StubbrLangPackage.DOCUMENTATION: return createDocumentation();
      case StubbrLangPackage.FLOW: return createFlow();
      case StubbrLangPackage.DI_DIAGRAM_ELEMENT: return createDiDiagramElement();
      case StubbrLangPackage.DI_DIAGRAM: return createDiDiagram();
      case StubbrLangPackage.DI_PLANE: return createDiPlane();
      case StubbrLangPackage.DI_PLANE_ELEMENT: return createDiPlaneElement();
      case StubbrLangPackage.DI_SHAPE: return createDiShape();
      case StubbrLangPackage.DI_EDGE: return createDiEdge();
      case StubbrLangPackage.DI_BOUNDS: return createDiBounds();
      case StubbrLangPackage.DI_WAYPOINT: return createDiWaypoint();
      case StubbrLangPackage.SEQUENCE_FLOW: return createSequenceFlow();
      case StubbrLangPackage.CHAPTER_PRESENTATION: return createChapterPresentation();
      case StubbrLangPackage.LAYOUT: return createLayout();
      case StubbrLangPackage.STYLING: return createStyling();
      case StubbrLangPackage.UI_ELEMENT: return createUiElement();
      case StubbrLangPackage.VIEW: return createView();
      case StubbrLangPackage.TRANSITION: return createTransition();
      case StubbrLangPackage.ELEMENT: return createElement();
      case StubbrLangPackage.LIST_VIEW: return createListView();
      case StubbrLangPackage.OUTPUT_TEXT: return createOutputText();
      case StubbrLangPackage.BUTTON: return createButton();
      case StubbrLangPackage.INPUT_FIELD: return createInputField();
      case StubbrLangPackage.NAME: return createName();
      case StubbrLangPackage.BIRTHDAY: return createBirthday();
      case StubbrLangPackage.ADDRESS: return createAddress();
      case StubbrLangPackage.RADIO_BUTTON_GROUP: return createRadioButtonGroup();
      case StubbrLangPackage.CHECK_BOX_GROUP: return createCheckBoxGroup();
      case StubbrLangPackage.UPLOAD: return createUpload();
      case StubbrLangPackage.CHAPTER_WEBSERVICE: return createChapterWebservice();
      case StubbrLangPackage.WEBSERVICE: return createWebservice();
      case StubbrLangPackage.REST_WEBSERVICE: return createRestWebservice();
      case StubbrLangPackage.SOAP_WEBSERVICE: return createSoapWebservice();
      case StubbrLangPackage.CHAPTER_BEHAVIOR: return createChapterBehavior();
      case StubbrLangPackage.FEATURE: return createFeature();
      case StubbrLangPackage.SCENARIO: return createScenario();
      case StubbrLangPackage.STEP: return createStep();
      case StubbrLangPackage.GIVEN_STEP: return createGivenStep();
      case StubbrLangPackage.WHEN_STEP: return createWhenStep();
      case StubbrLangPackage.THEN_STEP: return createThenStep();
      case StubbrLangPackage.POOOL: return createPoool();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case StubbrLangPackage.LOCALE:
        return createLocaleFromString(eDataType, initialValue);
      case StubbrLangPackage.DEV_PROJECT_TYPE:
        return createDevProjectTypeFromString(eDataType, initialValue);
      case StubbrLangPackage.JVM_ENUM:
        return createJvmEnumFromString(eDataType, initialValue);
      case StubbrLangPackage.DATABASE_ENUM:
        return createDatabaseEnumFromString(eDataType, initialValue);
      case StubbrLangPackage.BASE_TYPE_ENUM:
        return createBaseTypeEnumFromString(eDataType, initialValue);
      case StubbrLangPackage.TASK_TYPE:
        return createTaskTypeFromString(eDataType, initialValue);
      case StubbrLangPackage.EVENT_TYPE:
        return createEventTypeFromString(eDataType, initialValue);
      case StubbrLangPackage.EVENT_DEFINITION_TYPE:
        return createEventDefinitionTypeFromString(eDataType, initialValue);
      case StubbrLangPackage.GATEWAY_TYPE:
        return createGatewayTypeFromString(eDataType, initialValue);
      case StubbrLangPackage.DATA_IO_TYPE:
        return createDataIOTypeFromString(eDataType, initialValue);
      case StubbrLangPackage.FORMAT_TYPE:
        return createFormatTypeFromString(eDataType, initialValue);
      case StubbrLangPackage.EDITOR_TYPE:
        return createEditorTypeFromString(eDataType, initialValue);
      case StubbrLangPackage.MODEL_TYPE:
        return createModelTypeFromString(eDataType, initialValue);
      case StubbrLangPackage.UI_FRAMEWORK:
        return createUiFrameworkFromString(eDataType, initialValue);
      case StubbrLangPackage.REST_LANGUAGE:
        return createRestLanguageFromString(eDataType, initialValue);
      case StubbrLangPackage.BEHAVIOR_ACTION:
        return createBehaviorActionFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case StubbrLangPackage.LOCALE:
        return convertLocaleToString(eDataType, instanceValue);
      case StubbrLangPackage.DEV_PROJECT_TYPE:
        return convertDevProjectTypeToString(eDataType, instanceValue);
      case StubbrLangPackage.JVM_ENUM:
        return convertJvmEnumToString(eDataType, instanceValue);
      case StubbrLangPackage.DATABASE_ENUM:
        return convertDatabaseEnumToString(eDataType, instanceValue);
      case StubbrLangPackage.BASE_TYPE_ENUM:
        return convertBaseTypeEnumToString(eDataType, instanceValue);
      case StubbrLangPackage.TASK_TYPE:
        return convertTaskTypeToString(eDataType, instanceValue);
      case StubbrLangPackage.EVENT_TYPE:
        return convertEventTypeToString(eDataType, instanceValue);
      case StubbrLangPackage.EVENT_DEFINITION_TYPE:
        return convertEventDefinitionTypeToString(eDataType, instanceValue);
      case StubbrLangPackage.GATEWAY_TYPE:
        return convertGatewayTypeToString(eDataType, instanceValue);
      case StubbrLangPackage.DATA_IO_TYPE:
        return convertDataIOTypeToString(eDataType, instanceValue);
      case StubbrLangPackage.FORMAT_TYPE:
        return convertFormatTypeToString(eDataType, instanceValue);
      case StubbrLangPackage.EDITOR_TYPE:
        return convertEditorTypeToString(eDataType, instanceValue);
      case StubbrLangPackage.MODEL_TYPE:
        return convertModelTypeToString(eDataType, instanceValue);
      case StubbrLangPackage.UI_FRAMEWORK:
        return convertUiFrameworkToString(eDataType, instanceValue);
      case StubbrLangPackage.REST_LANGUAGE:
        return convertRestLanguageToString(eDataType, instanceValue);
      case StubbrLangPackage.BEHAVIOR_ACTION:
        return convertBehaviorActionToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Stubb createStubb()
  {
    StubbImpl stubb = new StubbImpl();
    return stubb;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Chapter createChapter()
  {
    ChapterImpl chapter = new ChapterImpl();
    return chapter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChapterGlobals createChapterGlobals()
  {
    ChapterGlobalsImpl chapterGlobals = new ChapterGlobalsImpl();
    return chapterGlobals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChapterProjectManagement createChapterProjectManagement()
  {
    ChapterProjectManagementImpl chapterProjectManagement = new ChapterProjectManagementImpl();
    return chapterProjectManagement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DevProject createDevProject()
  {
    DevProjectImpl devProject = new DevProjectImpl();
    return devProject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChapterProjectStructure createChapterProjectStructure()
  {
    ChapterProjectStructureImpl chapterProjectStructure = new ChapterProjectStructureImpl();
    return chapterProjectStructure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChapterPersistence createChapterPersistence()
  {
    ChapterPersistenceImpl chapterPersistence = new ChapterPersistenceImpl();
    return chapterPersistence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChapterTesting createChapterTesting()
  {
    ChapterTestingImpl chapterTesting = new ChapterTestingImpl();
    return chapterTesting;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChapterStakeholder createChapterStakeholder()
  {
    ChapterStakeholderImpl chapterStakeholder = new ChapterStakeholderImpl();
    return chapterStakeholder;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Stakeholder createStakeholder()
  {
    StakeholderImpl stakeholder = new StakeholderImpl();
    return stakeholder;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Organization createOrganization()
  {
    OrganizationImpl organization = new OrganizationImpl();
    return organization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Group createGroup()
  {
    GroupImpl group = new GroupImpl();
    return group;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Role createRole()
  {
    RoleImpl role = new RoleImpl();
    return role;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Person createPerson()
  {
    PersonImpl person = new PersonImpl();
    return person;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChapterEnvironment createChapterEnvironment()
  {
    ChapterEnvironmentImpl chapterEnvironment = new ChapterEnvironmentImpl();
    return chapterEnvironment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public com.laegler.stubbr.lang.stubbrLang.Runtime createRuntime()
  {
    RuntimeImpl runtime = new RuntimeImpl();
    return runtime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Database createDatabase()
  {
    DatabaseImpl database = new DatabaseImpl();
    return database;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Enumeration createEnumeration()
  {
    EnumerationImpl enumeration = new EnumerationImpl();
    return enumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Relationship createRelationship()
  {
    RelationshipImpl relationship = new RelationshipImpl();
    return relationship;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Level1Attribute createLevel1Attribute()
  {
    Level1AttributeImpl level1Attribute = new Level1AttributeImpl();
    return level1Attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChapterBusinessProcesses createChapterBusinessProcesses()
  {
    ChapterBusinessProcessesImpl chapterBusinessProcesses = new ChapterBusinessProcessesImpl();
    return chapterBusinessProcesses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BusinessProcess createBusinessProcess()
  {
    BusinessProcessImpl businessProcess = new BusinessProcessImpl();
    return businessProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pool createPool()
  {
    PoolImpl pool = new PoolImpl();
    return pool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FlowNode createFlowNode()
  {
    FlowNodeImpl flowNode = new FlowNodeImpl();
    return flowNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Lane createLane()
  {
    LaneImpl lane = new LaneImpl();
    return lane;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Activity createActivity()
  {
    ActivityImpl activity = new ActivityImpl();
    return activity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Task createTask()
  {
    TaskImpl task = new TaskImpl();
    return task;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CallActivity createCallActivity()
  {
    CallActivityImpl callActivity = new CallActivityImpl();
    return callActivity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SubProcess createSubProcess()
  {
    SubProcessImpl subProcess = new SubProcessImpl();
    return subProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Gateway createGateway()
  {
    GatewayImpl gateway = new GatewayImpl();
    return gateway;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GatewayDiverging createGatewayDiverging()
  {
    GatewayDivergingImpl gatewayDiverging = new GatewayDivergingImpl();
    return gatewayDiverging;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GatewayConverging createGatewayConverging()
  {
    GatewayConvergingImpl gatewayConverging = new GatewayConvergingImpl();
    return gatewayConverging;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptionFlowNode createOptionFlowNode()
  {
    OptionFlowNodeImpl optionFlowNode = new OptionFlowNodeImpl();
    return optionFlowNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Option createOption()
  {
    OptionImpl option = new OptionImpl();
    return option;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attachment createAttachment()
  {
    AttachmentImpl attachment = new AttachmentImpl();
    return attachment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InteractionNode createInteractionNode()
  {
    InteractionNodeImpl interactionNode = new InteractionNodeImpl();
    return interactionNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SendMessage createSendMessage()
  {
    SendMessageImpl sendMessage = new SendMessageImpl();
    return sendMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SendData createSendData()
  {
    SendDataImpl sendData = new SendDataImpl();
    return sendData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataIO createDataIO()
  {
    DataIOImpl dataIO = new DataIOImpl();
    return dataIO;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Annotation createAnnotation()
  {
    AnnotationImpl annotation = new AnnotationImpl();
    return annotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Documentation createDocumentation()
  {
    DocumentationImpl documentation = new DocumentationImpl();
    return documentation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Flow createFlow()
  {
    FlowImpl flow = new FlowImpl();
    return flow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiDiagramElement createDiDiagramElement()
  {
    DiDiagramElementImpl diDiagramElement = new DiDiagramElementImpl();
    return diDiagramElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiDiagram createDiDiagram()
  {
    DiDiagramImpl diDiagram = new DiDiagramImpl();
    return diDiagram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiPlane createDiPlane()
  {
    DiPlaneImpl diPlane = new DiPlaneImpl();
    return diPlane;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiPlaneElement createDiPlaneElement()
  {
    DiPlaneElementImpl diPlaneElement = new DiPlaneElementImpl();
    return diPlaneElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiShape createDiShape()
  {
    DiShapeImpl diShape = new DiShapeImpl();
    return diShape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiEdge createDiEdge()
  {
    DiEdgeImpl diEdge = new DiEdgeImpl();
    return diEdge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiBounds createDiBounds()
  {
    DiBoundsImpl diBounds = new DiBoundsImpl();
    return diBounds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiWaypoint createDiWaypoint()
  {
    DiWaypointImpl diWaypoint = new DiWaypointImpl();
    return diWaypoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SequenceFlow createSequenceFlow()
  {
    SequenceFlowImpl sequenceFlow = new SequenceFlowImpl();
    return sequenceFlow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChapterPresentation createChapterPresentation()
  {
    ChapterPresentationImpl chapterPresentation = new ChapterPresentationImpl();
    return chapterPresentation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Layout createLayout()
  {
    LayoutImpl layout = new LayoutImpl();
    return layout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Styling createStyling()
  {
    StylingImpl styling = new StylingImpl();
    return styling;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UiElement createUiElement()
  {
    UiElementImpl uiElement = new UiElementImpl();
    return uiElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public View createView()
  {
    ViewImpl view = new ViewImpl();
    return view;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Transition createTransition()
  {
    TransitionImpl transition = new TransitionImpl();
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListView createListView()
  {
    ListViewImpl listView = new ListViewImpl();
    return listView;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputText createOutputText()
  {
    OutputTextImpl outputText = new OutputTextImpl();
    return outputText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Button createButton()
  {
    ButtonImpl button = new ButtonImpl();
    return button;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InputField createInputField()
  {
    InputFieldImpl inputField = new InputFieldImpl();
    return inputField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Name createName()
  {
    NameImpl name = new NameImpl();
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Birthday createBirthday()
  {
    BirthdayImpl birthday = new BirthdayImpl();
    return birthday;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Address createAddress()
  {
    AddressImpl address = new AddressImpl();
    return address;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RadioButtonGroup createRadioButtonGroup()
  {
    RadioButtonGroupImpl radioButtonGroup = new RadioButtonGroupImpl();
    return radioButtonGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CheckBoxGroup createCheckBoxGroup()
  {
    CheckBoxGroupImpl checkBoxGroup = new CheckBoxGroupImpl();
    return checkBoxGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Upload createUpload()
  {
    UploadImpl upload = new UploadImpl();
    return upload;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChapterWebservice createChapterWebservice()
  {
    ChapterWebserviceImpl chapterWebservice = new ChapterWebserviceImpl();
    return chapterWebservice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Webservice createWebservice()
  {
    WebserviceImpl webservice = new WebserviceImpl();
    return webservice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RestWebservice createRestWebservice()
  {
    RestWebserviceImpl restWebservice = new RestWebserviceImpl();
    return restWebservice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SoapWebservice createSoapWebservice()
  {
    SoapWebserviceImpl soapWebservice = new SoapWebserviceImpl();
    return soapWebservice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChapterBehavior createChapterBehavior()
  {
    ChapterBehaviorImpl chapterBehavior = new ChapterBehaviorImpl();
    return chapterBehavior;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Feature createFeature()
  {
    FeatureImpl feature = new FeatureImpl();
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Scenario createScenario()
  {
    ScenarioImpl scenario = new ScenarioImpl();
    return scenario;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Step createStep()
  {
    StepImpl step = new StepImpl();
    return step;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GivenStep createGivenStep()
  {
    GivenStepImpl givenStep = new GivenStepImpl();
    return givenStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhenStep createWhenStep()
  {
    WhenStepImpl whenStep = new WhenStepImpl();
    return whenStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ThenStep createThenStep()
  {
    ThenStepImpl thenStep = new ThenStepImpl();
    return thenStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Poool createPoool()
  {
    PooolImpl poool = new PooolImpl();
    return poool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Locale createLocaleFromString(EDataType eDataType, String initialValue)
  {
    Locale result = Locale.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLocaleToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DevProjectType createDevProjectTypeFromString(EDataType eDataType, String initialValue)
  {
    DevProjectType result = DevProjectType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDevProjectTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JvmEnum createJvmEnumFromString(EDataType eDataType, String initialValue)
  {
    JvmEnum result = JvmEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertJvmEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DatabaseEnum createDatabaseEnumFromString(EDataType eDataType, String initialValue)
  {
    DatabaseEnum result = DatabaseEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDatabaseEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BaseTypeEnum createBaseTypeEnumFromString(EDataType eDataType, String initialValue)
  {
    BaseTypeEnum result = BaseTypeEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBaseTypeEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TaskType createTaskTypeFromString(EDataType eDataType, String initialValue)
  {
    TaskType result = TaskType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTaskTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventType createEventTypeFromString(EDataType eDataType, String initialValue)
  {
    EventType result = EventType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEventTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventDefinitionType createEventDefinitionTypeFromString(EDataType eDataType, String initialValue)
  {
    EventDefinitionType result = EventDefinitionType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEventDefinitionTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GatewayType createGatewayTypeFromString(EDataType eDataType, String initialValue)
  {
    GatewayType result = GatewayType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertGatewayTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataIOType createDataIOTypeFromString(EDataType eDataType, String initialValue)
  {
    DataIOType result = DataIOType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDataIOTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FormatType createFormatTypeFromString(EDataType eDataType, String initialValue)
  {
    FormatType result = FormatType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFormatTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EditorType createEditorTypeFromString(EDataType eDataType, String initialValue)
  {
    EditorType result = EditorType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEditorTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelType createModelTypeFromString(EDataType eDataType, String initialValue)
  {
    ModelType result = ModelType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertModelTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UiFramework createUiFrameworkFromString(EDataType eDataType, String initialValue)
  {
    UiFramework result = UiFramework.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertUiFrameworkToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RestLanguage createRestLanguageFromString(EDataType eDataType, String initialValue)
  {
    RestLanguage result = RestLanguage.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRestLanguageToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BehaviorAction createBehaviorActionFromString(EDataType eDataType, String initialValue)
  {
    BehaviorAction result = BehaviorAction.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBehaviorActionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StubbrLangPackage getStubbrLangPackage()
  {
    return (StubbrLangPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static StubbrLangPackage getPackage()
  {
    return StubbrLangPackage.eINSTANCE;
  }

} //StubbrLangFactoryImpl
