/**
 * generated by Xtext 2.10.0
 */
package com.laegler.stubbr.lang.stubbrLang.impl;

import com.laegler.stubbr.lang.stubbrLang.Attachment;
import com.laegler.stubbr.lang.stubbrLang.Event;
import com.laegler.stubbr.lang.stubbrLang.EventDefinitionType;
import com.laegler.stubbr.lang.stubbrLang.EventType;
import com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage;
import com.laegler.stubbr.lang.stubbrLang.View;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Event</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.EventImpl#getEventType <em>Event Type</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.EventImpl#getEventDefinitionType <em>Event Definition Type</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.EventImpl#isNonInterrupting <em>Non Interrupting</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.EventImpl#getDialog <em>Dialog</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.EventImpl#getAttachments <em>Attachments</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EventImpl extends FlowNodeImpl implements Event
{
  /**
   * The default value of the '{@link #getEventType() <em>Event Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventType()
   * @generated
   * @ordered
   */
  protected static final EventType EVENT_TYPE_EDEFAULT = EventType.EVENT;

  /**
   * The cached value of the '{@link #getEventType() <em>Event Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventType()
   * @generated
   * @ordered
   */
  protected EventType eventType = EVENT_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getEventDefinitionType() <em>Event Definition Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventDefinitionType()
   * @generated
   * @ordered
   */
  protected static final EventDefinitionType EVENT_DEFINITION_TYPE_EDEFAULT = EventDefinitionType.BLANK;

  /**
   * The cached value of the '{@link #getEventDefinitionType() <em>Event Definition Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventDefinitionType()
   * @generated
   * @ordered
   */
  protected EventDefinitionType eventDefinitionType = EVENT_DEFINITION_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #isNonInterrupting() <em>Non Interrupting</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNonInterrupting()
   * @generated
   * @ordered
   */
  protected static final boolean NON_INTERRUPTING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNonInterrupting() <em>Non Interrupting</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNonInterrupting()
   * @generated
   * @ordered
   */
  protected boolean nonInterrupting = NON_INTERRUPTING_EDEFAULT;

  /**
   * The cached value of the '{@link #getDialog() <em>Dialog</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDialog()
   * @generated
   * @ordered
   */
  protected View dialog;

  /**
   * The cached value of the '{@link #getAttachments() <em>Attachments</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttachments()
   * @generated
   * @ordered
   */
  protected EList<Attachment> attachments;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EventImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StubbrLangPackage.eINSTANCE.getEvent();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventType getEventType()
  {
    return eventType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEventType(EventType newEventType)
  {
    EventType oldEventType = eventType;
    eventType = newEventType == null ? EVENT_TYPE_EDEFAULT : newEventType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.EVENT__EVENT_TYPE, oldEventType, eventType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventDefinitionType getEventDefinitionType()
  {
    return eventDefinitionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEventDefinitionType(EventDefinitionType newEventDefinitionType)
  {
    EventDefinitionType oldEventDefinitionType = eventDefinitionType;
    eventDefinitionType = newEventDefinitionType == null ? EVENT_DEFINITION_TYPE_EDEFAULT : newEventDefinitionType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.EVENT__EVENT_DEFINITION_TYPE, oldEventDefinitionType, eventDefinitionType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNonInterrupting()
  {
    return nonInterrupting;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNonInterrupting(boolean newNonInterrupting)
  {
    boolean oldNonInterrupting = nonInterrupting;
    nonInterrupting = newNonInterrupting;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.EVENT__NON_INTERRUPTING, oldNonInterrupting, nonInterrupting));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public View getDialog()
  {
    if (dialog != null && dialog.eIsProxy())
    {
      InternalEObject oldDialog = (InternalEObject)dialog;
      dialog = (View)eResolveProxy(oldDialog);
      if (dialog != oldDialog)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, StubbrLangPackage.EVENT__DIALOG, oldDialog, dialog));
      }
    }
    return dialog;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public View basicGetDialog()
  {
    return dialog;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDialog(View newDialog)
  {
    View oldDialog = dialog;
    dialog = newDialog;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.EVENT__DIALOG, oldDialog, dialog));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Attachment> getAttachments()
  {
    if (attachments == null)
    {
      attachments = new EObjectContainmentEList<Attachment>(Attachment.class, this, StubbrLangPackage.EVENT__ATTACHMENTS);
    }
    return attachments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case StubbrLangPackage.EVENT__ATTACHMENTS:
        return ((InternalEList<?>)getAttachments()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StubbrLangPackage.EVENT__EVENT_TYPE:
        return getEventType();
      case StubbrLangPackage.EVENT__EVENT_DEFINITION_TYPE:
        return getEventDefinitionType();
      case StubbrLangPackage.EVENT__NON_INTERRUPTING:
        return isNonInterrupting();
      case StubbrLangPackage.EVENT__DIALOG:
        if (resolve) return getDialog();
        return basicGetDialog();
      case StubbrLangPackage.EVENT__ATTACHMENTS:
        return getAttachments();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StubbrLangPackage.EVENT__EVENT_TYPE:
        setEventType((EventType)newValue);
        return;
      case StubbrLangPackage.EVENT__EVENT_DEFINITION_TYPE:
        setEventDefinitionType((EventDefinitionType)newValue);
        return;
      case StubbrLangPackage.EVENT__NON_INTERRUPTING:
        setNonInterrupting((Boolean)newValue);
        return;
      case StubbrLangPackage.EVENT__DIALOG:
        setDialog((View)newValue);
        return;
      case StubbrLangPackage.EVENT__ATTACHMENTS:
        getAttachments().clear();
        getAttachments().addAll((Collection<? extends Attachment>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StubbrLangPackage.EVENT__EVENT_TYPE:
        setEventType(EVENT_TYPE_EDEFAULT);
        return;
      case StubbrLangPackage.EVENT__EVENT_DEFINITION_TYPE:
        setEventDefinitionType(EVENT_DEFINITION_TYPE_EDEFAULT);
        return;
      case StubbrLangPackage.EVENT__NON_INTERRUPTING:
        setNonInterrupting(NON_INTERRUPTING_EDEFAULT);
        return;
      case StubbrLangPackage.EVENT__DIALOG:
        setDialog((View)null);
        return;
      case StubbrLangPackage.EVENT__ATTACHMENTS:
        getAttachments().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StubbrLangPackage.EVENT__EVENT_TYPE:
        return eventType != EVENT_TYPE_EDEFAULT;
      case StubbrLangPackage.EVENT__EVENT_DEFINITION_TYPE:
        return eventDefinitionType != EVENT_DEFINITION_TYPE_EDEFAULT;
      case StubbrLangPackage.EVENT__NON_INTERRUPTING:
        return nonInterrupting != NON_INTERRUPTING_EDEFAULT;
      case StubbrLangPackage.EVENT__DIALOG:
        return dialog != null;
      case StubbrLangPackage.EVENT__ATTACHMENTS:
        return attachments != null && !attachments.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (eventType: ");
    result.append(eventType);
    result.append(", eventDefinitionType: ");
    result.append(eventDefinitionType);
    result.append(", nonInterrupting: ");
    result.append(nonInterrupting);
    result.append(')');
    return result.toString();
  }

} //EventImpl
