/**
 * generated by Xtext 2.10.0
 */
package com.laegler.stubbr.lang.stubbrLang.impl;

import com.laegler.stubbr.lang.stubbrLang.DiBounds;
import com.laegler.stubbr.lang.stubbrLang.DiShape;
import com.laegler.stubbr.lang.stubbrLang.FlowNode;
import com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Di Shape</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.DiShapeImpl#getFlowNode <em>Flow Node</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.DiShapeImpl#getBounds <em>Bounds</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.DiShapeImpl#isIsExpanded <em>Is Expanded</em>}</li>
 *   <li>{@link com.laegler.stubbr.lang.stubbrLang.impl.DiShapeImpl#isIsHorizontal <em>Is Horizontal</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DiShapeImpl extends DiPlaneElementImpl implements DiShape
{
  /**
   * The cached value of the '{@link #getFlowNode() <em>Flow Node</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlowNode()
   * @generated
   * @ordered
   */
  protected FlowNode flowNode;

  /**
   * The cached value of the '{@link #getBounds() <em>Bounds</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBounds()
   * @generated
   * @ordered
   */
  protected DiBounds bounds;

  /**
   * The default value of the '{@link #isIsExpanded() <em>Is Expanded</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsExpanded()
   * @generated
   * @ordered
   */
  protected static final boolean IS_EXPANDED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsExpanded() <em>Is Expanded</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsExpanded()
   * @generated
   * @ordered
   */
  protected boolean isExpanded = IS_EXPANDED_EDEFAULT;

  /**
   * The default value of the '{@link #isIsHorizontal() <em>Is Horizontal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsHorizontal()
   * @generated
   * @ordered
   */
  protected static final boolean IS_HORIZONTAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsHorizontal() <em>Is Horizontal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsHorizontal()
   * @generated
   * @ordered
   */
  protected boolean isHorizontal = IS_HORIZONTAL_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DiShapeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StubbrLangPackage.eINSTANCE.getDiShape();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FlowNode getFlowNode()
  {
    if (flowNode != null && flowNode.eIsProxy())
    {
      InternalEObject oldFlowNode = (InternalEObject)flowNode;
      flowNode = (FlowNode)eResolveProxy(oldFlowNode);
      if (flowNode != oldFlowNode)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, StubbrLangPackage.DI_SHAPE__FLOW_NODE, oldFlowNode, flowNode));
      }
    }
    return flowNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FlowNode basicGetFlowNode()
  {
    return flowNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFlowNode(FlowNode newFlowNode)
  {
    FlowNode oldFlowNode = flowNode;
    flowNode = newFlowNode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.DI_SHAPE__FLOW_NODE, oldFlowNode, flowNode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiBounds getBounds()
  {
    return bounds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBounds(DiBounds newBounds, NotificationChain msgs)
  {
    DiBounds oldBounds = bounds;
    bounds = newBounds;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, StubbrLangPackage.DI_SHAPE__BOUNDS, oldBounds, newBounds);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBounds(DiBounds newBounds)
  {
    if (newBounds != bounds)
    {
      NotificationChain msgs = null;
      if (bounds != null)
        msgs = ((InternalEObject)bounds).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - StubbrLangPackage.DI_SHAPE__BOUNDS, null, msgs);
      if (newBounds != null)
        msgs = ((InternalEObject)newBounds).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - StubbrLangPackage.DI_SHAPE__BOUNDS, null, msgs);
      msgs = basicSetBounds(newBounds, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.DI_SHAPE__BOUNDS, newBounds, newBounds));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIsExpanded()
  {
    return isExpanded;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIsExpanded(boolean newIsExpanded)
  {
    boolean oldIsExpanded = isExpanded;
    isExpanded = newIsExpanded;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.DI_SHAPE__IS_EXPANDED, oldIsExpanded, isExpanded));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIsHorizontal()
  {
    return isHorizontal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIsHorizontal(boolean newIsHorizontal)
  {
    boolean oldIsHorizontal = isHorizontal;
    isHorizontal = newIsHorizontal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StubbrLangPackage.DI_SHAPE__IS_HORIZONTAL, oldIsHorizontal, isHorizontal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case StubbrLangPackage.DI_SHAPE__BOUNDS:
        return basicSetBounds(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StubbrLangPackage.DI_SHAPE__FLOW_NODE:
        if (resolve) return getFlowNode();
        return basicGetFlowNode();
      case StubbrLangPackage.DI_SHAPE__BOUNDS:
        return getBounds();
      case StubbrLangPackage.DI_SHAPE__IS_EXPANDED:
        return isIsExpanded();
      case StubbrLangPackage.DI_SHAPE__IS_HORIZONTAL:
        return isIsHorizontal();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StubbrLangPackage.DI_SHAPE__FLOW_NODE:
        setFlowNode((FlowNode)newValue);
        return;
      case StubbrLangPackage.DI_SHAPE__BOUNDS:
        setBounds((DiBounds)newValue);
        return;
      case StubbrLangPackage.DI_SHAPE__IS_EXPANDED:
        setIsExpanded((Boolean)newValue);
        return;
      case StubbrLangPackage.DI_SHAPE__IS_HORIZONTAL:
        setIsHorizontal((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StubbrLangPackage.DI_SHAPE__FLOW_NODE:
        setFlowNode((FlowNode)null);
        return;
      case StubbrLangPackage.DI_SHAPE__BOUNDS:
        setBounds((DiBounds)null);
        return;
      case StubbrLangPackage.DI_SHAPE__IS_EXPANDED:
        setIsExpanded(IS_EXPANDED_EDEFAULT);
        return;
      case StubbrLangPackage.DI_SHAPE__IS_HORIZONTAL:
        setIsHorizontal(IS_HORIZONTAL_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StubbrLangPackage.DI_SHAPE__FLOW_NODE:
        return flowNode != null;
      case StubbrLangPackage.DI_SHAPE__BOUNDS:
        return bounds != null;
      case StubbrLangPackage.DI_SHAPE__IS_EXPANDED:
        return isExpanded != IS_EXPANDED_EDEFAULT;
      case StubbrLangPackage.DI_SHAPE__IS_HORIZONTAL:
        return isHorizontal != IS_HORIZONTAL_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (isExpanded: ");
    result.append(isExpanded);
    result.append(", isHorizontal: ");
    result.append(isHorizontal);
    result.append(')');
    return result.toString();
  }

} //DiShapeImpl
