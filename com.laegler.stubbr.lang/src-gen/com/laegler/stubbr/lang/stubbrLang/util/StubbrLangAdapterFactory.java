/**
 * generated by Xtext 2.10.0
 */
package com.laegler.stubbr.lang.stubbrLang.util;

import com.laegler.stubbr.lang.stubbrLang.Activity;
import com.laegler.stubbr.lang.stubbrLang.Address;
import com.laegler.stubbr.lang.stubbrLang.Annotation;
import com.laegler.stubbr.lang.stubbrLang.Attachment;
import com.laegler.stubbr.lang.stubbrLang.Attribute;
import com.laegler.stubbr.lang.stubbrLang.Birthday;
import com.laegler.stubbr.lang.stubbrLang.BusinessProcess;
import com.laegler.stubbr.lang.stubbrLang.Button;
import com.laegler.stubbr.lang.stubbrLang.CallActivity;
import com.laegler.stubbr.lang.stubbrLang.Chapter;
import com.laegler.stubbr.lang.stubbrLang.ChapterBehavior;
import com.laegler.stubbr.lang.stubbrLang.ChapterBusinessProcesses;
import com.laegler.stubbr.lang.stubbrLang.ChapterEnvironment;
import com.laegler.stubbr.lang.stubbrLang.ChapterGlobals;
import com.laegler.stubbr.lang.stubbrLang.ChapterPersistence;
import com.laegler.stubbr.lang.stubbrLang.ChapterPresentation;
import com.laegler.stubbr.lang.stubbrLang.ChapterProjectManagement;
import com.laegler.stubbr.lang.stubbrLang.ChapterProjectStructure;
import com.laegler.stubbr.lang.stubbrLang.ChapterStakeholder;
import com.laegler.stubbr.lang.stubbrLang.ChapterTesting;
import com.laegler.stubbr.lang.stubbrLang.ChapterWebservice;
import com.laegler.stubbr.lang.stubbrLang.CheckBoxGroup;
import com.laegler.stubbr.lang.stubbrLang.DataIO;
import com.laegler.stubbr.lang.stubbrLang.Database;
import com.laegler.stubbr.lang.stubbrLang.DevProject;
import com.laegler.stubbr.lang.stubbrLang.DiBounds;
import com.laegler.stubbr.lang.stubbrLang.DiDiagram;
import com.laegler.stubbr.lang.stubbrLang.DiDiagramElement;
import com.laegler.stubbr.lang.stubbrLang.DiEdge;
import com.laegler.stubbr.lang.stubbrLang.DiPlane;
import com.laegler.stubbr.lang.stubbrLang.DiPlaneElement;
import com.laegler.stubbr.lang.stubbrLang.DiShape;
import com.laegler.stubbr.lang.stubbrLang.DiWaypoint;
import com.laegler.stubbr.lang.stubbrLang.Documentation;
import com.laegler.stubbr.lang.stubbrLang.Element;
import com.laegler.stubbr.lang.stubbrLang.Entity;
import com.laegler.stubbr.lang.stubbrLang.Enumeration;
import com.laegler.stubbr.lang.stubbrLang.Event;
import com.laegler.stubbr.lang.stubbrLang.FOption;
import com.laegler.stubbr.lang.stubbrLang.FPool;
import com.laegler.stubbr.lang.stubbrLang.Feature;
import com.laegler.stubbr.lang.stubbrLang.Flow;
import com.laegler.stubbr.lang.stubbrLang.FlowNode;
import com.laegler.stubbr.lang.stubbrLang.Gateway;
import com.laegler.stubbr.lang.stubbrLang.GatewayConverging;
import com.laegler.stubbr.lang.stubbrLang.GatewayDiverging;
import com.laegler.stubbr.lang.stubbrLang.GivenStep;
import com.laegler.stubbr.lang.stubbrLang.Group;
import com.laegler.stubbr.lang.stubbrLang.InputField;
import com.laegler.stubbr.lang.stubbrLang.InteractionNode;
import com.laegler.stubbr.lang.stubbrLang.Lane;
import com.laegler.stubbr.lang.stubbrLang.Layout;
import com.laegler.stubbr.lang.stubbrLang.Level1Attribute;
import com.laegler.stubbr.lang.stubbrLang.ListView;
import com.laegler.stubbr.lang.stubbrLang.Name;
import com.laegler.stubbr.lang.stubbrLang.Option;
import com.laegler.stubbr.lang.stubbrLang.OptionFlowNode;
import com.laegler.stubbr.lang.stubbrLang.Organization;
import com.laegler.stubbr.lang.stubbrLang.OutputText;
import com.laegler.stubbr.lang.stubbrLang.Person;
import com.laegler.stubbr.lang.stubbrLang.Pool;
import com.laegler.stubbr.lang.stubbrLang.RadioButtonGroup;
import com.laegler.stubbr.lang.stubbrLang.Relationship;
import com.laegler.stubbr.lang.stubbrLang.RestWebservice;
import com.laegler.stubbr.lang.stubbrLang.Role;
import com.laegler.stubbr.lang.stubbrLang.Scenario;
import com.laegler.stubbr.lang.stubbrLang.SendData;
import com.laegler.stubbr.lang.stubbrLang.SendMessage;
import com.laegler.stubbr.lang.stubbrLang.SequenceFlow;
import com.laegler.stubbr.lang.stubbrLang.SoapWebservice;
import com.laegler.stubbr.lang.stubbrLang.Stakeholder;
import com.laegler.stubbr.lang.stubbrLang.Step;
import com.laegler.stubbr.lang.stubbrLang.Stubb;
import com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage;
import com.laegler.stubbr.lang.stubbrLang.Styling;
import com.laegler.stubbr.lang.stubbrLang.SubProcess;
import com.laegler.stubbr.lang.stubbrLang.Task;
import com.laegler.stubbr.lang.stubbrLang.ThenStep;
import com.laegler.stubbr.lang.stubbrLang.Transition;
import com.laegler.stubbr.lang.stubbrLang.UiElement;
import com.laegler.stubbr.lang.stubbrLang.Upload;
import com.laegler.stubbr.lang.stubbrLang.View;
import com.laegler.stubbr.lang.stubbrLang.Webservice;
import com.laegler.stubbr.lang.stubbrLang.WhenStep;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage
 * @generated
 */
public class StubbrLangAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static StubbrLangPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StubbrLangAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = StubbrLangPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StubbrLangSwitch<Adapter> modelSwitch =
    new StubbrLangSwitch<Adapter>()
    {
      @Override
      public Adapter caseStubb(Stubb object)
      {
        return createStubbAdapter();
      }
      @Override
      public Adapter caseChapter(Chapter object)
      {
        return createChapterAdapter();
      }
      @Override
      public Adapter caseChapterGlobals(ChapterGlobals object)
      {
        return createChapterGlobalsAdapter();
      }
      @Override
      public Adapter caseChapterProjectManagement(ChapterProjectManagement object)
      {
        return createChapterProjectManagementAdapter();
      }
      @Override
      public Adapter caseDevProject(DevProject object)
      {
        return createDevProjectAdapter();
      }
      @Override
      public Adapter caseChapterProjectStructure(ChapterProjectStructure object)
      {
        return createChapterProjectStructureAdapter();
      }
      @Override
      public Adapter caseChapterPersistence(ChapterPersistence object)
      {
        return createChapterPersistenceAdapter();
      }
      @Override
      public Adapter caseChapterTesting(ChapterTesting object)
      {
        return createChapterTestingAdapter();
      }
      @Override
      public Adapter caseChapterStakeholder(ChapterStakeholder object)
      {
        return createChapterStakeholderAdapter();
      }
      @Override
      public Adapter caseStakeholder(Stakeholder object)
      {
        return createStakeholderAdapter();
      }
      @Override
      public Adapter caseOrganization(Organization object)
      {
        return createOrganizationAdapter();
      }
      @Override
      public Adapter caseGroup(Group object)
      {
        return createGroupAdapter();
      }
      @Override
      public Adapter caseRole(Role object)
      {
        return createRoleAdapter();
      }
      @Override
      public Adapter casePerson(Person object)
      {
        return createPersonAdapter();
      }
      @Override
      public Adapter caseChapterEnvironment(ChapterEnvironment object)
      {
        return createChapterEnvironmentAdapter();
      }
      @Override
      public Adapter caseRuntime(com.laegler.stubbr.lang.stubbrLang.Runtime object)
      {
        return createRuntimeAdapter();
      }
      @Override
      public Adapter caseDatabase(Database object)
      {
        return createDatabaseAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseEnumeration(Enumeration object)
      {
        return createEnumerationAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseRelationship(Relationship object)
      {
        return createRelationshipAdapter();
      }
      @Override
      public Adapter caseLevel1Attribute(Level1Attribute object)
      {
        return createLevel1AttributeAdapter();
      }
      @Override
      public Adapter caseChapterBusinessProcesses(ChapterBusinessProcesses object)
      {
        return createChapterBusinessProcessesAdapter();
      }
      @Override
      public Adapter caseBusinessProcess(BusinessProcess object)
      {
        return createBusinessProcessAdapter();
      }
      @Override
      public Adapter casePool(Pool object)
      {
        return createPoolAdapter();
      }
      @Override
      public Adapter caseFlowNode(FlowNode object)
      {
        return createFlowNodeAdapter();
      }
      @Override
      public Adapter caseLane(Lane object)
      {
        return createLaneAdapter();
      }
      @Override
      public Adapter caseEvent(Event object)
      {
        return createEventAdapter();
      }
      @Override
      public Adapter caseActivity(Activity object)
      {
        return createActivityAdapter();
      }
      @Override
      public Adapter caseTask(Task object)
      {
        return createTaskAdapter();
      }
      @Override
      public Adapter caseCallActivity(CallActivity object)
      {
        return createCallActivityAdapter();
      }
      @Override
      public Adapter caseSubProcess(SubProcess object)
      {
        return createSubProcessAdapter();
      }
      @Override
      public Adapter caseGateway(Gateway object)
      {
        return createGatewayAdapter();
      }
      @Override
      public Adapter caseGatewayDiverging(GatewayDiverging object)
      {
        return createGatewayDivergingAdapter();
      }
      @Override
      public Adapter caseGatewayConverging(GatewayConverging object)
      {
        return createGatewayConvergingAdapter();
      }
      @Override
      public Adapter caseOptionFlowNode(OptionFlowNode object)
      {
        return createOptionFlowNodeAdapter();
      }
      @Override
      public Adapter caseOption(Option object)
      {
        return createOptionAdapter();
      }
      @Override
      public Adapter caseAttachment(Attachment object)
      {
        return createAttachmentAdapter();
      }
      @Override
      public Adapter caseInteractionNode(InteractionNode object)
      {
        return createInteractionNodeAdapter();
      }
      @Override
      public Adapter caseSendMessage(SendMessage object)
      {
        return createSendMessageAdapter();
      }
      @Override
      public Adapter caseSendData(SendData object)
      {
        return createSendDataAdapter();
      }
      @Override
      public Adapter caseDataIO(DataIO object)
      {
        return createDataIOAdapter();
      }
      @Override
      public Adapter caseAnnotation(Annotation object)
      {
        return createAnnotationAdapter();
      }
      @Override
      public Adapter caseDocumentation(Documentation object)
      {
        return createDocumentationAdapter();
      }
      @Override
      public Adapter caseFlow(Flow object)
      {
        return createFlowAdapter();
      }
      @Override
      public Adapter caseDiDiagramElement(DiDiagramElement object)
      {
        return createDiDiagramElementAdapter();
      }
      @Override
      public Adapter caseDiDiagram(DiDiagram object)
      {
        return createDiDiagramAdapter();
      }
      @Override
      public Adapter caseDiPlane(DiPlane object)
      {
        return createDiPlaneAdapter();
      }
      @Override
      public Adapter caseDiPlaneElement(DiPlaneElement object)
      {
        return createDiPlaneElementAdapter();
      }
      @Override
      public Adapter caseDiShape(DiShape object)
      {
        return createDiShapeAdapter();
      }
      @Override
      public Adapter caseDiEdge(DiEdge object)
      {
        return createDiEdgeAdapter();
      }
      @Override
      public Adapter caseDiBounds(DiBounds object)
      {
        return createDiBoundsAdapter();
      }
      @Override
      public Adapter caseDiWaypoint(DiWaypoint object)
      {
        return createDiWaypointAdapter();
      }
      @Override
      public Adapter caseSequenceFlow(SequenceFlow object)
      {
        return createSequenceFlowAdapter();
      }
      @Override
      public Adapter caseChapterPresentation(ChapterPresentation object)
      {
        return createChapterPresentationAdapter();
      }
      @Override
      public Adapter caseLayout(Layout object)
      {
        return createLayoutAdapter();
      }
      @Override
      public Adapter caseStyling(Styling object)
      {
        return createStylingAdapter();
      }
      @Override
      public Adapter caseUiElement(UiElement object)
      {
        return createUiElementAdapter();
      }
      @Override
      public Adapter caseView(View object)
      {
        return createViewAdapter();
      }
      @Override
      public Adapter caseTransition(Transition object)
      {
        return createTransitionAdapter();
      }
      @Override
      public Adapter caseElement(Element object)
      {
        return createElementAdapter();
      }
      @Override
      public Adapter caseListView(ListView object)
      {
        return createListViewAdapter();
      }
      @Override
      public Adapter caseOutputText(OutputText object)
      {
        return createOutputTextAdapter();
      }
      @Override
      public Adapter caseButton(Button object)
      {
        return createButtonAdapter();
      }
      @Override
      public Adapter caseInputField(InputField object)
      {
        return createInputFieldAdapter();
      }
      @Override
      public Adapter caseName(Name object)
      {
        return createNameAdapter();
      }
      @Override
      public Adapter caseBirthday(Birthday object)
      {
        return createBirthdayAdapter();
      }
      @Override
      public Adapter caseAddress(Address object)
      {
        return createAddressAdapter();
      }
      @Override
      public Adapter caseRadioButtonGroup(RadioButtonGroup object)
      {
        return createRadioButtonGroupAdapter();
      }
      @Override
      public Adapter caseCheckBoxGroup(CheckBoxGroup object)
      {
        return createCheckBoxGroupAdapter();
      }
      @Override
      public Adapter caseUpload(Upload object)
      {
        return createUploadAdapter();
      }
      @Override
      public Adapter caseChapterWebservice(ChapterWebservice object)
      {
        return createChapterWebserviceAdapter();
      }
      @Override
      public Adapter caseWebservice(Webservice object)
      {
        return createWebserviceAdapter();
      }
      @Override
      public Adapter caseRestWebservice(RestWebservice object)
      {
        return createRestWebserviceAdapter();
      }
      @Override
      public Adapter caseSoapWebservice(SoapWebservice object)
      {
        return createSoapWebserviceAdapter();
      }
      @Override
      public Adapter caseChapterBehavior(ChapterBehavior object)
      {
        return createChapterBehaviorAdapter();
      }
      @Override
      public Adapter caseFeature(Feature object)
      {
        return createFeatureAdapter();
      }
      @Override
      public Adapter caseScenario(Scenario object)
      {
        return createScenarioAdapter();
      }
      @Override
      public Adapter caseStep(Step object)
      {
        return createStepAdapter();
      }
      @Override
      public Adapter caseGivenStep(GivenStep object)
      {
        return createGivenStepAdapter();
      }
      @Override
      public Adapter caseWhenStep(WhenStep object)
      {
        return createWhenStepAdapter();
      }
      @Override
      public Adapter caseThenStep(ThenStep object)
      {
        return createThenStepAdapter();
      }
      @Override
      public Adapter caseFPool(FPool object)
      {
        return createFPoolAdapter();
      }
      @Override
      public Adapter caseFOption(FOption object)
      {
        return createFOptionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Stubb <em>Stubb</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Stubb
   * @generated
   */
  public Adapter createStubbAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Chapter <em>Chapter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Chapter
   * @generated
   */
  public Adapter createChapterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.ChapterGlobals <em>Chapter Globals</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.ChapterGlobals
   * @generated
   */
  public Adapter createChapterGlobalsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.ChapterProjectManagement <em>Chapter Project Management</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.ChapterProjectManagement
   * @generated
   */
  public Adapter createChapterProjectManagementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.DevProject <em>Dev Project</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.DevProject
   * @generated
   */
  public Adapter createDevProjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.ChapterProjectStructure <em>Chapter Project Structure</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.ChapterProjectStructure
   * @generated
   */
  public Adapter createChapterProjectStructureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.ChapterPersistence <em>Chapter Persistence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.ChapterPersistence
   * @generated
   */
  public Adapter createChapterPersistenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.ChapterTesting <em>Chapter Testing</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.ChapterTesting
   * @generated
   */
  public Adapter createChapterTestingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.ChapterStakeholder <em>Chapter Stakeholder</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.ChapterStakeholder
   * @generated
   */
  public Adapter createChapterStakeholderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Stakeholder <em>Stakeholder</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Stakeholder
   * @generated
   */
  public Adapter createStakeholderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Organization <em>Organization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Organization
   * @generated
   */
  public Adapter createOrganizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Group <em>Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Group
   * @generated
   */
  public Adapter createGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Role <em>Role</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Role
   * @generated
   */
  public Adapter createRoleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Person <em>Person</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Person
   * @generated
   */
  public Adapter createPersonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.ChapterEnvironment <em>Chapter Environment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.ChapterEnvironment
   * @generated
   */
  public Adapter createChapterEnvironmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Runtime <em>Runtime</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Runtime
   * @generated
   */
  public Adapter createRuntimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Database <em>Database</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Database
   * @generated
   */
  public Adapter createDatabaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Enumeration <em>Enumeration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Enumeration
   * @generated
   */
  public Adapter createEnumerationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Relationship <em>Relationship</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Relationship
   * @generated
   */
  public Adapter createRelationshipAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Level1Attribute <em>Level1 Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Level1Attribute
   * @generated
   */
  public Adapter createLevel1AttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.ChapterBusinessProcesses <em>Chapter Business Processes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.ChapterBusinessProcesses
   * @generated
   */
  public Adapter createChapterBusinessProcessesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.BusinessProcess <em>Business Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.BusinessProcess
   * @generated
   */
  public Adapter createBusinessProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Pool <em>Pool</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Pool
   * @generated
   */
  public Adapter createPoolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.FlowNode <em>Flow Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.FlowNode
   * @generated
   */
  public Adapter createFlowNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Lane <em>Lane</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Lane
   * @generated
   */
  public Adapter createLaneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Event <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Event
   * @generated
   */
  public Adapter createEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Activity <em>Activity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Activity
   * @generated
   */
  public Adapter createActivityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Task <em>Task</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Task
   * @generated
   */
  public Adapter createTaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.CallActivity <em>Call Activity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.CallActivity
   * @generated
   */
  public Adapter createCallActivityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.SubProcess <em>Sub Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.SubProcess
   * @generated
   */
  public Adapter createSubProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Gateway <em>Gateway</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Gateway
   * @generated
   */
  public Adapter createGatewayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.GatewayDiverging <em>Gateway Diverging</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.GatewayDiverging
   * @generated
   */
  public Adapter createGatewayDivergingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.GatewayConverging <em>Gateway Converging</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.GatewayConverging
   * @generated
   */
  public Adapter createGatewayConvergingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.OptionFlowNode <em>Option Flow Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.OptionFlowNode
   * @generated
   */
  public Adapter createOptionFlowNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Option <em>Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Option
   * @generated
   */
  public Adapter createOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Attachment <em>Attachment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Attachment
   * @generated
   */
  public Adapter createAttachmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.InteractionNode <em>Interaction Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.InteractionNode
   * @generated
   */
  public Adapter createInteractionNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.SendMessage <em>Send Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.SendMessage
   * @generated
   */
  public Adapter createSendMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.SendData <em>Send Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.SendData
   * @generated
   */
  public Adapter createSendDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.DataIO <em>Data IO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.DataIO
   * @generated
   */
  public Adapter createDataIOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Annotation <em>Annotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Annotation
   * @generated
   */
  public Adapter createAnnotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Documentation <em>Documentation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Documentation
   * @generated
   */
  public Adapter createDocumentationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Flow <em>Flow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Flow
   * @generated
   */
  public Adapter createFlowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.DiDiagramElement <em>Di Diagram Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.DiDiagramElement
   * @generated
   */
  public Adapter createDiDiagramElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.DiDiagram <em>Di Diagram</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.DiDiagram
   * @generated
   */
  public Adapter createDiDiagramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.DiPlane <em>Di Plane</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.DiPlane
   * @generated
   */
  public Adapter createDiPlaneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.DiPlaneElement <em>Di Plane Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.DiPlaneElement
   * @generated
   */
  public Adapter createDiPlaneElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.DiShape <em>Di Shape</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.DiShape
   * @generated
   */
  public Adapter createDiShapeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.DiEdge <em>Di Edge</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.DiEdge
   * @generated
   */
  public Adapter createDiEdgeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.DiBounds <em>Di Bounds</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.DiBounds
   * @generated
   */
  public Adapter createDiBoundsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.DiWaypoint <em>Di Waypoint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.DiWaypoint
   * @generated
   */
  public Adapter createDiWaypointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.SequenceFlow <em>Sequence Flow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.SequenceFlow
   * @generated
   */
  public Adapter createSequenceFlowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.ChapterPresentation <em>Chapter Presentation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.ChapterPresentation
   * @generated
   */
  public Adapter createChapterPresentationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Layout <em>Layout</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Layout
   * @generated
   */
  public Adapter createLayoutAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Styling <em>Styling</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Styling
   * @generated
   */
  public Adapter createStylingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.UiElement <em>Ui Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.UiElement
   * @generated
   */
  public Adapter createUiElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.View <em>View</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.View
   * @generated
   */
  public Adapter createViewAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Transition <em>Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Transition
   * @generated
   */
  public Adapter createTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Element <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Element
   * @generated
   */
  public Adapter createElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.ListView <em>List View</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.ListView
   * @generated
   */
  public Adapter createListViewAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.OutputText <em>Output Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.OutputText
   * @generated
   */
  public Adapter createOutputTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Button <em>Button</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Button
   * @generated
   */
  public Adapter createButtonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.InputField <em>Input Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.InputField
   * @generated
   */
  public Adapter createInputFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Name <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Name
   * @generated
   */
  public Adapter createNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Birthday <em>Birthday</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Birthday
   * @generated
   */
  public Adapter createBirthdayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Address <em>Address</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Address
   * @generated
   */
  public Adapter createAddressAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.RadioButtonGroup <em>Radio Button Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.RadioButtonGroup
   * @generated
   */
  public Adapter createRadioButtonGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.CheckBoxGroup <em>Check Box Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.CheckBoxGroup
   * @generated
   */
  public Adapter createCheckBoxGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Upload <em>Upload</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Upload
   * @generated
   */
  public Adapter createUploadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.ChapterWebservice <em>Chapter Webservice</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.ChapterWebservice
   * @generated
   */
  public Adapter createChapterWebserviceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Webservice <em>Webservice</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Webservice
   * @generated
   */
  public Adapter createWebserviceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.RestWebservice <em>Rest Webservice</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.RestWebservice
   * @generated
   */
  public Adapter createRestWebserviceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.SoapWebservice <em>Soap Webservice</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.SoapWebservice
   * @generated
   */
  public Adapter createSoapWebserviceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.ChapterBehavior <em>Chapter Behavior</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.ChapterBehavior
   * @generated
   */
  public Adapter createChapterBehaviorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Feature <em>Feature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Feature
   * @generated
   */
  public Adapter createFeatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Scenario <em>Scenario</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Scenario
   * @generated
   */
  public Adapter createScenarioAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.Step <em>Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.Step
   * @generated
   */
  public Adapter createStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.GivenStep <em>Given Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.GivenStep
   * @generated
   */
  public Adapter createGivenStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.WhenStep <em>When Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.WhenStep
   * @generated
   */
  public Adapter createWhenStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.ThenStep <em>Then Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.ThenStep
   * @generated
   */
  public Adapter createThenStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.FPool <em>FPool</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.FPool
   * @generated
   */
  public Adapter createFPoolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.laegler.stubbr.lang.stubbrLang.FOption <em>FOption</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.laegler.stubbr.lang.stubbrLang.FOption
   * @generated
   */
  public Adapter createFOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //StubbrLangAdapterFactory
