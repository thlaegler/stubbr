/**
 * generated by Xtext 2.10.0
 */
package com.laegler.stubbr.lang.stubbrLang.util;

import com.laegler.stubbr.lang.stubbrLang.Activity;
import com.laegler.stubbr.lang.stubbrLang.Address;
import com.laegler.stubbr.lang.stubbrLang.Annotation;
import com.laegler.stubbr.lang.stubbrLang.Attachment;
import com.laegler.stubbr.lang.stubbrLang.Attribute;
import com.laegler.stubbr.lang.stubbrLang.Birthday;
import com.laegler.stubbr.lang.stubbrLang.BusinessProcess;
import com.laegler.stubbr.lang.stubbrLang.Button;
import com.laegler.stubbr.lang.stubbrLang.CallActivity;
import com.laegler.stubbr.lang.stubbrLang.Chapter;
import com.laegler.stubbr.lang.stubbrLang.ChapterBehavior;
import com.laegler.stubbr.lang.stubbrLang.ChapterBusinessProcesses;
import com.laegler.stubbr.lang.stubbrLang.ChapterEnvironment;
import com.laegler.stubbr.lang.stubbrLang.ChapterGlobals;
import com.laegler.stubbr.lang.stubbrLang.ChapterPersistence;
import com.laegler.stubbr.lang.stubbrLang.ChapterPresentation;
import com.laegler.stubbr.lang.stubbrLang.ChapterProjectManagement;
import com.laegler.stubbr.lang.stubbrLang.ChapterProjectStructure;
import com.laegler.stubbr.lang.stubbrLang.ChapterStakeholder;
import com.laegler.stubbr.lang.stubbrLang.ChapterTesting;
import com.laegler.stubbr.lang.stubbrLang.ChapterWebservice;
import com.laegler.stubbr.lang.stubbrLang.CheckBoxGroup;
import com.laegler.stubbr.lang.stubbrLang.DataIO;
import com.laegler.stubbr.lang.stubbrLang.Database;
import com.laegler.stubbr.lang.stubbrLang.DevProject;
import com.laegler.stubbr.lang.stubbrLang.DiBounds;
import com.laegler.stubbr.lang.stubbrLang.DiDiagram;
import com.laegler.stubbr.lang.stubbrLang.DiDiagramElement;
import com.laegler.stubbr.lang.stubbrLang.DiEdge;
import com.laegler.stubbr.lang.stubbrLang.DiPlane;
import com.laegler.stubbr.lang.stubbrLang.DiPlaneElement;
import com.laegler.stubbr.lang.stubbrLang.DiShape;
import com.laegler.stubbr.lang.stubbrLang.DiWaypoint;
import com.laegler.stubbr.lang.stubbrLang.Documentation;
import com.laegler.stubbr.lang.stubbrLang.Element;
import com.laegler.stubbr.lang.stubbrLang.Entity;
import com.laegler.stubbr.lang.stubbrLang.Enumeration;
import com.laegler.stubbr.lang.stubbrLang.Event;
import com.laegler.stubbr.lang.stubbrLang.FOption;
import com.laegler.stubbr.lang.stubbrLang.FPool;
import com.laegler.stubbr.lang.stubbrLang.Feature;
import com.laegler.stubbr.lang.stubbrLang.Flow;
import com.laegler.stubbr.lang.stubbrLang.FlowNode;
import com.laegler.stubbr.lang.stubbrLang.Gateway;
import com.laegler.stubbr.lang.stubbrLang.GatewayConverging;
import com.laegler.stubbr.lang.stubbrLang.GatewayDiverging;
import com.laegler.stubbr.lang.stubbrLang.GivenStep;
import com.laegler.stubbr.lang.stubbrLang.Group;
import com.laegler.stubbr.lang.stubbrLang.InputField;
import com.laegler.stubbr.lang.stubbrLang.InteractionNode;
import com.laegler.stubbr.lang.stubbrLang.Lane;
import com.laegler.stubbr.lang.stubbrLang.Layout;
import com.laegler.stubbr.lang.stubbrLang.Level1Attribute;
import com.laegler.stubbr.lang.stubbrLang.ListView;
import com.laegler.stubbr.lang.stubbrLang.Name;
import com.laegler.stubbr.lang.stubbrLang.Option;
import com.laegler.stubbr.lang.stubbrLang.OptionFlowNode;
import com.laegler.stubbr.lang.stubbrLang.Organization;
import com.laegler.stubbr.lang.stubbrLang.OutputText;
import com.laegler.stubbr.lang.stubbrLang.Person;
import com.laegler.stubbr.lang.stubbrLang.Pool;
import com.laegler.stubbr.lang.stubbrLang.RadioButtonGroup;
import com.laegler.stubbr.lang.stubbrLang.Relationship;
import com.laegler.stubbr.lang.stubbrLang.RestWebservice;
import com.laegler.stubbr.lang.stubbrLang.Role;
import com.laegler.stubbr.lang.stubbrLang.Scenario;
import com.laegler.stubbr.lang.stubbrLang.SendData;
import com.laegler.stubbr.lang.stubbrLang.SendMessage;
import com.laegler.stubbr.lang.stubbrLang.SequenceFlow;
import com.laegler.stubbr.lang.stubbrLang.SoapWebservice;
import com.laegler.stubbr.lang.stubbrLang.Stakeholder;
import com.laegler.stubbr.lang.stubbrLang.Step;
import com.laegler.stubbr.lang.stubbrLang.Stubb;
import com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage;
import com.laegler.stubbr.lang.stubbrLang.Styling;
import com.laegler.stubbr.lang.stubbrLang.SubProcess;
import com.laegler.stubbr.lang.stubbrLang.Task;
import com.laegler.stubbr.lang.stubbrLang.ThenStep;
import com.laegler.stubbr.lang.stubbrLang.Transition;
import com.laegler.stubbr.lang.stubbrLang.UiElement;
import com.laegler.stubbr.lang.stubbrLang.Upload;
import com.laegler.stubbr.lang.stubbrLang.View;
import com.laegler.stubbr.lang.stubbrLang.Webservice;
import com.laegler.stubbr.lang.stubbrLang.WhenStep;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage
 * @generated
 */
public class StubbrLangSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static StubbrLangPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StubbrLangSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = StubbrLangPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case StubbrLangPackage.STUBB:
      {
        Stubb stubb = (Stubb)theEObject;
        T result = caseStubb(stubb);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.CHAPTER:
      {
        Chapter chapter = (Chapter)theEObject;
        T result = caseChapter(chapter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.CHAPTER_GLOBALS:
      {
        ChapterGlobals chapterGlobals = (ChapterGlobals)theEObject;
        T result = caseChapterGlobals(chapterGlobals);
        if (result == null) result = caseChapter(chapterGlobals);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.CHAPTER_PROJECT_MANAGEMENT:
      {
        ChapterProjectManagement chapterProjectManagement = (ChapterProjectManagement)theEObject;
        T result = caseChapterProjectManagement(chapterProjectManagement);
        if (result == null) result = caseChapter(chapterProjectManagement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.DEV_PROJECT:
      {
        DevProject devProject = (DevProject)theEObject;
        T result = caseDevProject(devProject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.CHAPTER_PROJECT_STRUCTURE:
      {
        ChapterProjectStructure chapterProjectStructure = (ChapterProjectStructure)theEObject;
        T result = caseChapterProjectStructure(chapterProjectStructure);
        if (result == null) result = caseChapter(chapterProjectStructure);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.CHAPTER_PERSISTENCE:
      {
        ChapterPersistence chapterPersistence = (ChapterPersistence)theEObject;
        T result = caseChapterPersistence(chapterPersistence);
        if (result == null) result = caseChapter(chapterPersistence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.CHAPTER_TESTING:
      {
        ChapterTesting chapterTesting = (ChapterTesting)theEObject;
        T result = caseChapterTesting(chapterTesting);
        if (result == null) result = caseChapter(chapterTesting);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.CHAPTER_STAKEHOLDER:
      {
        ChapterStakeholder chapterStakeholder = (ChapterStakeholder)theEObject;
        T result = caseChapterStakeholder(chapterStakeholder);
        if (result == null) result = caseChapter(chapterStakeholder);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.STAKEHOLDER:
      {
        Stakeholder stakeholder = (Stakeholder)theEObject;
        T result = caseStakeholder(stakeholder);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.ORGANIZATION:
      {
        Organization organization = (Organization)theEObject;
        T result = caseOrganization(organization);
        if (result == null) result = caseStakeholder(organization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.GROUP:
      {
        Group group = (Group)theEObject;
        T result = caseGroup(group);
        if (result == null) result = caseStakeholder(group);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.ROLE:
      {
        Role role = (Role)theEObject;
        T result = caseRole(role);
        if (result == null) result = caseStakeholder(role);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.PERSON:
      {
        Person person = (Person)theEObject;
        T result = casePerson(person);
        if (result == null) result = caseStakeholder(person);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.CHAPTER_ENVIRONMENT:
      {
        ChapterEnvironment chapterEnvironment = (ChapterEnvironment)theEObject;
        T result = caseChapterEnvironment(chapterEnvironment);
        if (result == null) result = caseChapter(chapterEnvironment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.RUNTIME:
      {
        com.laegler.stubbr.lang.stubbrLang.Runtime runtime = (com.laegler.stubbr.lang.stubbrLang.Runtime)theEObject;
        T result = caseRuntime(runtime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.DATABASE:
      {
        Database database = (Database)theEObject;
        T result = caseDatabase(database);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.ENTITY:
      {
        Entity entity = (Entity)theEObject;
        T result = caseEntity(entity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.ENUMERATION:
      {
        Enumeration enumeration = (Enumeration)theEObject;
        T result = caseEnumeration(enumeration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.RELATIONSHIP:
      {
        Relationship relationship = (Relationship)theEObject;
        T result = caseRelationship(relationship);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.LEVEL1_ATTRIBUTE:
      {
        Level1Attribute level1Attribute = (Level1Attribute)theEObject;
        T result = caseLevel1Attribute(level1Attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.CHAPTER_BUSINESS_PROCESSES:
      {
        ChapterBusinessProcesses chapterBusinessProcesses = (ChapterBusinessProcesses)theEObject;
        T result = caseChapterBusinessProcesses(chapterBusinessProcesses);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.BUSINESS_PROCESS:
      {
        BusinessProcess businessProcess = (BusinessProcess)theEObject;
        T result = caseBusinessProcess(businessProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.POOL:
      {
        Pool pool = (Pool)theEObject;
        T result = casePool(pool);
        if (result == null) result = caseInteractionNode(pool);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.FLOW_NODE:
      {
        FlowNode flowNode = (FlowNode)theEObject;
        T result = caseFlowNode(flowNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.LANE:
      {
        Lane lane = (Lane)theEObject;
        T result = caseLane(lane);
        if (result == null) result = caseFlowNode(lane);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.EVENT:
      {
        Event event = (Event)theEObject;
        T result = caseEvent(event);
        if (result == null) result = caseFlowNode(event);
        if (result == null) result = caseOptionFlowNode(event);
        if (result == null) result = caseInteractionNode(event);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.ACTIVITY:
      {
        Activity activity = (Activity)theEObject;
        T result = caseActivity(activity);
        if (result == null) result = caseFlowNode(activity);
        if (result == null) result = caseOptionFlowNode(activity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.TASK:
      {
        Task task = (Task)theEObject;
        T result = caseTask(task);
        if (result == null) result = caseActivity(task);
        if (result == null) result = caseInteractionNode(task);
        if (result == null) result = caseFlowNode(task);
        if (result == null) result = caseOptionFlowNode(task);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.CALL_ACTIVITY:
      {
        CallActivity callActivity = (CallActivity)theEObject;
        T result = caseCallActivity(callActivity);
        if (result == null) result = caseActivity(callActivity);
        if (result == null) result = caseFlowNode(callActivity);
        if (result == null) result = caseOptionFlowNode(callActivity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.SUB_PROCESS:
      {
        SubProcess subProcess = (SubProcess)theEObject;
        T result = caseSubProcess(subProcess);
        if (result == null) result = caseActivity(subProcess);
        if (result == null) result = caseFlowNode(subProcess);
        if (result == null) result = caseOptionFlowNode(subProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.GATEWAY:
      {
        Gateway gateway = (Gateway)theEObject;
        T result = caseGateway(gateway);
        if (result == null) result = caseFlowNode(gateway);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.GATEWAY_DIVERGING:
      {
        GatewayDiverging gatewayDiverging = (GatewayDiverging)theEObject;
        T result = caseGatewayDiverging(gatewayDiverging);
        if (result == null) result = caseGateway(gatewayDiverging);
        if (result == null) result = caseOptionFlowNode(gatewayDiverging);
        if (result == null) result = caseFlowNode(gatewayDiverging);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.GATEWAY_CONVERGING:
      {
        GatewayConverging gatewayConverging = (GatewayConverging)theEObject;
        T result = caseGatewayConverging(gatewayConverging);
        if (result == null) result = caseGateway(gatewayConverging);
        if (result == null) result = caseFlowNode(gatewayConverging);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.OPTION_FLOW_NODE:
      {
        OptionFlowNode optionFlowNode = (OptionFlowNode)theEObject;
        T result = caseOptionFlowNode(optionFlowNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.OPTION:
      {
        Option option = (Option)theEObject;
        T result = caseOption(option);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.ATTACHMENT:
      {
        Attachment attachment = (Attachment)theEObject;
        T result = caseAttachment(attachment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.INTERACTION_NODE:
      {
        InteractionNode interactionNode = (InteractionNode)theEObject;
        T result = caseInteractionNode(interactionNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.SEND_MESSAGE:
      {
        SendMessage sendMessage = (SendMessage)theEObject;
        T result = caseSendMessage(sendMessage);
        if (result == null) result = caseAttachment(sendMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.SEND_DATA:
      {
        SendData sendData = (SendData)theEObject;
        T result = caseSendData(sendData);
        if (result == null) result = caseAttachment(sendData);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.DATA_IO:
      {
        DataIO dataIO = (DataIO)theEObject;
        T result = caseDataIO(dataIO);
        if (result == null) result = caseAttachment(dataIO);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.ANNOTATION:
      {
        Annotation annotation = (Annotation)theEObject;
        T result = caseAnnotation(annotation);
        if (result == null) result = caseAttachment(annotation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.DOCUMENTATION:
      {
        Documentation documentation = (Documentation)theEObject;
        T result = caseDocumentation(documentation);
        if (result == null) result = caseAttachment(documentation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.FLOW:
      {
        Flow flow = (Flow)theEObject;
        T result = caseFlow(flow);
        if (result == null) result = caseAttachment(flow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.DI_DIAGRAM_ELEMENT:
      {
        DiDiagramElement diDiagramElement = (DiDiagramElement)theEObject;
        T result = caseDiDiagramElement(diDiagramElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.DI_DIAGRAM:
      {
        DiDiagram diDiagram = (DiDiagram)theEObject;
        T result = caseDiDiagram(diDiagram);
        if (result == null) result = caseDiDiagramElement(diDiagram);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.DI_PLANE:
      {
        DiPlane diPlane = (DiPlane)theEObject;
        T result = caseDiPlane(diPlane);
        if (result == null) result = caseDiDiagramElement(diPlane);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.DI_PLANE_ELEMENT:
      {
        DiPlaneElement diPlaneElement = (DiPlaneElement)theEObject;
        T result = caseDiPlaneElement(diPlaneElement);
        if (result == null) result = caseDiDiagramElement(diPlaneElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.DI_SHAPE:
      {
        DiShape diShape = (DiShape)theEObject;
        T result = caseDiShape(diShape);
        if (result == null) result = caseDiPlaneElement(diShape);
        if (result == null) result = caseDiDiagramElement(diShape);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.DI_EDGE:
      {
        DiEdge diEdge = (DiEdge)theEObject;
        T result = caseDiEdge(diEdge);
        if (result == null) result = caseDiPlaneElement(diEdge);
        if (result == null) result = caseDiDiagramElement(diEdge);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.DI_BOUNDS:
      {
        DiBounds diBounds = (DiBounds)theEObject;
        T result = caseDiBounds(diBounds);
        if (result == null) result = caseDiDiagramElement(diBounds);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.DI_WAYPOINT:
      {
        DiWaypoint diWaypoint = (DiWaypoint)theEObject;
        T result = caseDiWaypoint(diWaypoint);
        if (result == null) result = caseDiDiagramElement(diWaypoint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.SEQUENCE_FLOW:
      {
        SequenceFlow sequenceFlow = (SequenceFlow)theEObject;
        T result = caseSequenceFlow(sequenceFlow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.CHAPTER_PRESENTATION:
      {
        ChapterPresentation chapterPresentation = (ChapterPresentation)theEObject;
        T result = caseChapterPresentation(chapterPresentation);
        if (result == null) result = caseChapter(chapterPresentation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.LAYOUT:
      {
        Layout layout = (Layout)theEObject;
        T result = caseLayout(layout);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.STYLING:
      {
        Styling styling = (Styling)theEObject;
        T result = caseStyling(styling);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.UI_ELEMENT:
      {
        UiElement uiElement = (UiElement)theEObject;
        T result = caseUiElement(uiElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.VIEW:
      {
        View view = (View)theEObject;
        T result = caseView(view);
        if (result == null) result = caseUiElement(view);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.TRANSITION:
      {
        Transition transition = (Transition)theEObject;
        T result = caseTransition(transition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.ELEMENT:
      {
        Element element = (Element)theEObject;
        T result = caseElement(element);
        if (result == null) result = caseUiElement(element);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.LIST_VIEW:
      {
        ListView listView = (ListView)theEObject;
        T result = caseListView(listView);
        if (result == null) result = caseElement(listView);
        if (result == null) result = caseUiElement(listView);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.OUTPUT_TEXT:
      {
        OutputText outputText = (OutputText)theEObject;
        T result = caseOutputText(outputText);
        if (result == null) result = caseElement(outputText);
        if (result == null) result = caseUiElement(outputText);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.BUTTON:
      {
        Button button = (Button)theEObject;
        T result = caseButton(button);
        if (result == null) result = caseElement(button);
        if (result == null) result = caseUiElement(button);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.INPUT_FIELD:
      {
        InputField inputField = (InputField)theEObject;
        T result = caseInputField(inputField);
        if (result == null) result = caseElement(inputField);
        if (result == null) result = caseUiElement(inputField);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.NAME:
      {
        Name name = (Name)theEObject;
        T result = caseName(name);
        if (result == null) result = caseElement(name);
        if (result == null) result = caseUiElement(name);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.BIRTHDAY:
      {
        Birthday birthday = (Birthday)theEObject;
        T result = caseBirthday(birthday);
        if (result == null) result = caseElement(birthday);
        if (result == null) result = caseUiElement(birthday);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.ADDRESS:
      {
        Address address = (Address)theEObject;
        T result = caseAddress(address);
        if (result == null) result = caseElement(address);
        if (result == null) result = caseUiElement(address);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.RADIO_BUTTON_GROUP:
      {
        RadioButtonGroup radioButtonGroup = (RadioButtonGroup)theEObject;
        T result = caseRadioButtonGroup(radioButtonGroup);
        if (result == null) result = caseElement(radioButtonGroup);
        if (result == null) result = caseUiElement(radioButtonGroup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.CHECK_BOX_GROUP:
      {
        CheckBoxGroup checkBoxGroup = (CheckBoxGroup)theEObject;
        T result = caseCheckBoxGroup(checkBoxGroup);
        if (result == null) result = caseElement(checkBoxGroup);
        if (result == null) result = caseUiElement(checkBoxGroup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.UPLOAD:
      {
        Upload upload = (Upload)theEObject;
        T result = caseUpload(upload);
        if (result == null) result = caseElement(upload);
        if (result == null) result = caseUiElement(upload);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.CHAPTER_WEBSERVICE:
      {
        ChapterWebservice chapterWebservice = (ChapterWebservice)theEObject;
        T result = caseChapterWebservice(chapterWebservice);
        if (result == null) result = caseChapter(chapterWebservice);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.WEBSERVICE:
      {
        Webservice webservice = (Webservice)theEObject;
        T result = caseWebservice(webservice);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.REST_WEBSERVICE:
      {
        RestWebservice restWebservice = (RestWebservice)theEObject;
        T result = caseRestWebservice(restWebservice);
        if (result == null) result = caseWebservice(restWebservice);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.SOAP_WEBSERVICE:
      {
        SoapWebservice soapWebservice = (SoapWebservice)theEObject;
        T result = caseSoapWebservice(soapWebservice);
        if (result == null) result = caseWebservice(soapWebservice);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.CHAPTER_BEHAVIOR:
      {
        ChapterBehavior chapterBehavior = (ChapterBehavior)theEObject;
        T result = caseChapterBehavior(chapterBehavior);
        if (result == null) result = caseChapter(chapterBehavior);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.FEATURE:
      {
        Feature feature = (Feature)theEObject;
        T result = caseFeature(feature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.SCENARIO:
      {
        Scenario scenario = (Scenario)theEObject;
        T result = caseScenario(scenario);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.STEP:
      {
        Step step = (Step)theEObject;
        T result = caseStep(step);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.GIVEN_STEP:
      {
        GivenStep givenStep = (GivenStep)theEObject;
        T result = caseGivenStep(givenStep);
        if (result == null) result = caseStep(givenStep);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.WHEN_STEP:
      {
        WhenStep whenStep = (WhenStep)theEObject;
        T result = caseWhenStep(whenStep);
        if (result == null) result = caseStep(whenStep);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.THEN_STEP:
      {
        ThenStep thenStep = (ThenStep)theEObject;
        T result = caseThenStep(thenStep);
        if (result == null) result = caseStep(thenStep);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.FPOOL:
      {
        FPool fPool = (FPool)theEObject;
        T result = caseFPool(fPool);
        if (result == null) result = casePool(fPool);
        if (result == null) result = caseInteractionNode(fPool);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case StubbrLangPackage.FOPTION:
      {
        FOption fOption = (FOption)theEObject;
        T result = caseFOption(fOption);
        if (result == null) result = caseOption(fOption);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stubb</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stubb</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStubb(Stubb object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapter(Chapter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter Globals</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter Globals</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapterGlobals(ChapterGlobals object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter Project Management</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter Project Management</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapterProjectManagement(ChapterProjectManagement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dev Project</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dev Project</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDevProject(DevProject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter Project Structure</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter Project Structure</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapterProjectStructure(ChapterProjectStructure object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter Persistence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter Persistence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapterPersistence(ChapterPersistence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter Testing</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter Testing</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapterTesting(ChapterTesting object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter Stakeholder</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter Stakeholder</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapterStakeholder(ChapterStakeholder object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stakeholder</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stakeholder</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStakeholder(Stakeholder object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Organization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Organization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrganization(Organization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGroup(Group object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Role</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Role</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRole(Role object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Person</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Person</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePerson(Person object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter Environment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter Environment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapterEnvironment(ChapterEnvironment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Runtime</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Runtime</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuntime(com.laegler.stubbr.lang.stubbrLang.Runtime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Database</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Database</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDatabase(Database object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntity(Entity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumeration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumeration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumeration(Enumeration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relationship</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relationship</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationship(Relationship object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Level1 Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Level1 Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLevel1Attribute(Level1Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter Business Processes</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter Business Processes</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapterBusinessProcesses(ChapterBusinessProcesses object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Business Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Business Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBusinessProcess(BusinessProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pool</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pool</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePool(Pool object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Flow Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Flow Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFlowNode(FlowNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Lane</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Lane</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLane(Lane object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvent(Event object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Activity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Activity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActivity(Activity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Task</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Task</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTask(Task object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Call Activity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Call Activity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCallActivity(CallActivity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubProcess(SubProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Gateway</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Gateway</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGateway(Gateway object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Gateway Diverging</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Gateway Diverging</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGatewayDiverging(GatewayDiverging object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Gateway Converging</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Gateway Converging</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGatewayConverging(GatewayConverging object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Option Flow Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Option Flow Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOptionFlowNode(OptionFlowNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Option</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Option</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOption(Option object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attachment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attachment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttachment(Attachment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interaction Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interaction Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInteractionNode(InteractionNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Send Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Send Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSendMessage(SendMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Send Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Send Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSendData(SendData object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data IO</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data IO</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataIO(DataIO object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annotation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annotation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnotation(Annotation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Documentation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Documentation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDocumentation(Documentation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Flow</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Flow</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFlow(Flow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Di Diagram Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Di Diagram Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiDiagramElement(DiDiagramElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Di Diagram</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Di Diagram</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiDiagram(DiDiagram object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Di Plane</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Di Plane</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiPlane(DiPlane object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Di Plane Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Di Plane Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiPlaneElement(DiPlaneElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Di Shape</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Di Shape</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiShape(DiShape object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Di Edge</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Di Edge</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiEdge(DiEdge object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Di Bounds</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Di Bounds</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiBounds(DiBounds object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Di Waypoint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Di Waypoint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiWaypoint(DiWaypoint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Flow</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Flow</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceFlow(SequenceFlow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter Presentation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter Presentation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapterPresentation(ChapterPresentation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Layout</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Layout</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLayout(Layout object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Styling</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Styling</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStyling(Styling object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ui Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ui Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUiElement(UiElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>View</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>View</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseView(View object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransition(Transition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElement(Element object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List View</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List View</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListView(ListView object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Text</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Text</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputText(OutputText object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Button</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Button</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseButton(Button object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Input Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Input Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInputField(InputField object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseName(Name object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Birthday</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Birthday</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBirthday(Birthday object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Address</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Address</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddress(Address object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Radio Button Group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Radio Button Group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRadioButtonGroup(RadioButtonGroup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Check Box Group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Check Box Group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCheckBoxGroup(CheckBoxGroup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Upload</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Upload</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUpload(Upload object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter Webservice</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter Webservice</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapterWebservice(ChapterWebservice object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Webservice</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Webservice</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWebservice(Webservice object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rest Webservice</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rest Webservice</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRestWebservice(RestWebservice object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Soap Webservice</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Soap Webservice</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSoapWebservice(SoapWebservice object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chapter Behavior</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chapter Behavior</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChapterBehavior(ChapterBehavior object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeature(Feature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scenario</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scenario</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScenario(Scenario object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Step</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Step</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStep(Step object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Given Step</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Given Step</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGivenStep(GivenStep object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>When Step</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>When Step</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhenStep(WhenStep object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Then Step</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Then Step</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThenStep(ThenStep object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FPool</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FPool</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFPool(FPool object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FOption</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FOption</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFOption(FOption object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //StubbrLangSwitch
