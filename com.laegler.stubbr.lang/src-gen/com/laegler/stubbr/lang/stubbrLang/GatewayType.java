/**
 * generated by Xtext 2.10.0
 */
package com.laegler.stubbr.lang.stubbrLang;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Gateway Type</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage#getGatewayType()
 * @model
 * @generated
 */
public enum GatewayType implements Enumerator
{
  /**
   * The '<em><b>BLANK</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BLANK_VALUE
   * @generated
   * @ordered
   */
  BLANK(0, "BLANK", "gateway"),

  /**
   * The '<em><b>PARALLEL</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PARALLEL_VALUE
   * @generated
   * @ordered
   */
  PARALLEL(1, "PARALLEL", "parallel"),

  /**
   * The '<em><b>INCLUSIVE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #INCLUSIVE_VALUE
   * @generated
   * @ordered
   */
  INCLUSIVE(2, "INCLUSIVE", "inclusive"),

  /**
   * The '<em><b>EXCLUSIVE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #EXCLUSIVE_VALUE
   * @generated
   * @ordered
   */
  EXCLUSIVE(3, "EXCLUSIVE", "exclusive"),

  /**
   * The '<em><b>EVENTBASED</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #EVENTBASED_VALUE
   * @generated
   * @ordered
   */
  EVENTBASED(4, "EVENTBASED", "eventbased"),

  /**
   * The '<em><b>COMPLEX</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #COMPLEX_VALUE
   * @generated
   * @ordered
   */
  COMPLEX(5, "COMPLEX", "complex");

  /**
   * The '<em><b>BLANK</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>BLANK</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #BLANK
   * @model literal="gateway"
   * @generated
   * @ordered
   */
  public static final int BLANK_VALUE = 0;

  /**
   * The '<em><b>PARALLEL</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>PARALLEL</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #PARALLEL
   * @model literal="parallel"
   * @generated
   * @ordered
   */
  public static final int PARALLEL_VALUE = 1;

  /**
   * The '<em><b>INCLUSIVE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>INCLUSIVE</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #INCLUSIVE
   * @model literal="inclusive"
   * @generated
   * @ordered
   */
  public static final int INCLUSIVE_VALUE = 2;

  /**
   * The '<em><b>EXCLUSIVE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>EXCLUSIVE</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #EXCLUSIVE
   * @model literal="exclusive"
   * @generated
   * @ordered
   */
  public static final int EXCLUSIVE_VALUE = 3;

  /**
   * The '<em><b>EVENTBASED</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>EVENTBASED</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #EVENTBASED
   * @model literal="eventbased"
   * @generated
   * @ordered
   */
  public static final int EVENTBASED_VALUE = 4;

  /**
   * The '<em><b>COMPLEX</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>COMPLEX</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #COMPLEX
   * @model literal="complex"
   * @generated
   * @ordered
   */
  public static final int COMPLEX_VALUE = 5;

  /**
   * An array of all the '<em><b>Gateway Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final GatewayType[] VALUES_ARRAY =
    new GatewayType[]
    {
      BLANK,
      PARALLEL,
      INCLUSIVE,
      EXCLUSIVE,
      EVENTBASED,
      COMPLEX,
    };

  /**
   * A public read-only list of all the '<em><b>Gateway Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<GatewayType> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Gateway Type</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static GatewayType get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      GatewayType result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Gateway Type</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static GatewayType getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      GatewayType result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Gateway Type</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static GatewayType get(int value)
  {
    switch (value)
    {
      case BLANK_VALUE: return BLANK;
      case PARALLEL_VALUE: return PARALLEL;
      case INCLUSIVE_VALUE: return INCLUSIVE;
      case EXCLUSIVE_VALUE: return EXCLUSIVE;
      case EVENTBASED_VALUE: return EVENTBASED;
      case COMPLEX_VALUE: return COMPLEX;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private GatewayType(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //GatewayType
