/*
 * generated by Xtext 2.10.0
 */
package com.laegler.stubbr.lang.serializer;

import com.google.inject.Inject;
import com.laegler.stubbr.lang.services.StubbrLangGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class StubbrLangSyntacticSequencer extends AbstractSyntacticSequencer {

	protected StubbrLangGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ChapterEnvironment_EnvVariablesKeyword_3_0_q;
	protected AbstractElementAlias match_ChapterEnvironment_InfrastructureKeyword_2_0_q;
	protected AbstractElementAlias match_ChapterPersistence_DatabasesKeyword_2_0_q;
	protected AbstractElementAlias match_ChapterPersistence_DatasourcesKeyword_3_0_q;
	protected AbstractElementAlias match_ChapterPersistence_PersistenceUnitKeyword_4_0_q;
	protected AbstractElementAlias match_ChapterPersistence___PersistenceUnitKeyword_4_0_or___DatasourcesKeyword_3_0_PersistenceUnitKeyword_4_0____q;
	protected AbstractElementAlias match_ChapterProjectManagement_ContinousIntegrationKeyword_6_0_q;
	protected AbstractElementAlias match_ChapterProjectManagement_DistroManagementKeyword_5_0_q;
	protected AbstractElementAlias match_ChapterProjectManagement_IssueManagementKeyword_4_0_q;
	protected AbstractElementAlias match_ChapterProjectManagement_ProjectsKeyword_2_0_q;
	protected AbstractElementAlias match_ChapterProjectManagement_SourceCodeManagementKeyword_3_0_q;
	protected AbstractElementAlias match_ChapterProjectManagement___ContinousIntegrationKeyword_6_0_or___IssueManagementKeyword_4_0_ContinousIntegrationKeyword_6_0___or___SourceCodeManagementKeyword_3_0___ContinousIntegrationKeyword_6_0_or___IssueManagementKeyword_4_0_ContinousIntegrationKeyword_6_0_______or_____IssueManagementKeyword_4_0_or___SourceCodeManagementKeyword_3_0_IssueManagementKeyword_4_0____q_DistroManagementKeyword_5_0_ContinousIntegrationKeyword_6_0____q;
	protected AbstractElementAlias match_ChapterProjectStructure_PropertiesKeyword_3_0_q;
	protected AbstractElementAlias match_ChapterStakeholder_GroupsKeyword_3_0_q;
	protected AbstractElementAlias match_ChapterStakeholder_OrganizationsKeyword_2_0_q;
	protected AbstractElementAlias match_ChapterStakeholder_PersonsKeyword_5_0_q;
	protected AbstractElementAlias match_ChapterStakeholder_RolesKeyword_4_0_q;
	protected AbstractElementAlias match_ChapterStakeholder___PersonsKeyword_5_0_or___GroupsKeyword_3_0_q_PersonsKeyword_5_0___or___GroupsKeyword_3_0_q_RolesKeyword_4_0_PersonsKeyword_5_0____q;
	protected AbstractElementAlias match_ChapterTesting_TestCasesKeyword_3_0_q;
	protected AbstractElementAlias match_ChapterTesting_TestMethodsKeyword_2_0_q;
	protected AbstractElementAlias match_ThenStep_IntoKeyword_9_0_0_q;
	protected AbstractElementAlias match_WhenStep_IntoKeyword_8_0_0_q;
	protected AbstractElementAlias match_XBlockExpression_SemicolonKeyword_2_1_q;
	protected AbstractElementAlias match_XExpressionInClosure_SemicolonKeyword_1_1_q;
	protected AbstractElementAlias match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q;
	protected AbstractElementAlias match_XImportDeclaration_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_XParenthesizedExpression_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_XParenthesizedExpression_LeftParenthesisKeyword_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (StubbrLangGrammarAccess) access;
		match_ChapterEnvironment_EnvVariablesKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getChapterEnvironmentAccess().getEnvVariablesKeyword_3_0());
		match_ChapterEnvironment_InfrastructureKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getChapterEnvironmentAccess().getInfrastructureKeyword_2_0());
		match_ChapterPersistence_DatabasesKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getChapterPersistenceAccess().getDatabasesKeyword_2_0());
		match_ChapterPersistence_DatasourcesKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getChapterPersistenceAccess().getDatasourcesKeyword_3_0());
		match_ChapterPersistence_PersistenceUnitKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getChapterPersistenceAccess().getPersistenceUnitKeyword_4_0());
		match_ChapterPersistence___PersistenceUnitKeyword_4_0_or___DatasourcesKeyword_3_0_PersistenceUnitKeyword_4_0____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getChapterPersistenceAccess().getDatasourcesKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getChapterPersistenceAccess().getPersistenceUnitKeyword_4_0())), new TokenAlias(false, false, grammarAccess.getChapterPersistenceAccess().getPersistenceUnitKeyword_4_0()));
		match_ChapterProjectManagement_ContinousIntegrationKeyword_6_0_q = new TokenAlias(false, true, grammarAccess.getChapterProjectManagementAccess().getContinousIntegrationKeyword_6_0());
		match_ChapterProjectManagement_DistroManagementKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getChapterProjectManagementAccess().getDistroManagementKeyword_5_0());
		match_ChapterProjectManagement_IssueManagementKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getChapterProjectManagementAccess().getIssueManagementKeyword_4_0());
		match_ChapterProjectManagement_ProjectsKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getChapterProjectManagementAccess().getProjectsKeyword_2_0());
		match_ChapterProjectManagement_SourceCodeManagementKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getChapterProjectManagementAccess().getSourceCodeManagementKeyword_3_0());
		match_ChapterProjectManagement___ContinousIntegrationKeyword_6_0_or___IssueManagementKeyword_4_0_ContinousIntegrationKeyword_6_0___or___SourceCodeManagementKeyword_3_0___ContinousIntegrationKeyword_6_0_or___IssueManagementKeyword_4_0_ContinousIntegrationKeyword_6_0_______or_____IssueManagementKeyword_4_0_or___SourceCodeManagementKeyword_3_0_IssueManagementKeyword_4_0____q_DistroManagementKeyword_5_0_ContinousIntegrationKeyword_6_0____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getChapterProjectManagementAccess().getSourceCodeManagementKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getChapterProjectManagementAccess().getIssueManagementKeyword_4_0())), new TokenAlias(false, false, grammarAccess.getChapterProjectManagementAccess().getIssueManagementKeyword_4_0())), new TokenAlias(false, false, grammarAccess.getChapterProjectManagementAccess().getDistroManagementKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getChapterProjectManagementAccess().getContinousIntegrationKeyword_6_0())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getChapterProjectManagementAccess().getIssueManagementKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getChapterProjectManagementAccess().getContinousIntegrationKeyword_6_0())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getChapterProjectManagementAccess().getSourceCodeManagementKeyword_3_0()), new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getChapterProjectManagementAccess().getIssueManagementKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getChapterProjectManagementAccess().getContinousIntegrationKeyword_6_0())), new TokenAlias(false, false, grammarAccess.getChapterProjectManagementAccess().getContinousIntegrationKeyword_6_0()))), new TokenAlias(false, false, grammarAccess.getChapterProjectManagementAccess().getContinousIntegrationKeyword_6_0()));
		match_ChapterProjectStructure_PropertiesKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getChapterProjectStructureAccess().getPropertiesKeyword_3_0());
		match_ChapterStakeholder_GroupsKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getChapterStakeholderAccess().getGroupsKeyword_3_0());
		match_ChapterStakeholder_OrganizationsKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getChapterStakeholderAccess().getOrganizationsKeyword_2_0());
		match_ChapterStakeholder_PersonsKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getChapterStakeholderAccess().getPersonsKeyword_5_0());
		match_ChapterStakeholder_RolesKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getChapterStakeholderAccess().getRolesKeyword_4_0());
		match_ChapterStakeholder___PersonsKeyword_5_0_or___GroupsKeyword_3_0_q_PersonsKeyword_5_0___or___GroupsKeyword_3_0_q_RolesKeyword_4_0_PersonsKeyword_5_0____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, true, grammarAccess.getChapterStakeholderAccess().getGroupsKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getChapterStakeholderAccess().getPersonsKeyword_5_0())), new GroupAlias(false, false, new TokenAlias(false, true, grammarAccess.getChapterStakeholderAccess().getGroupsKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getChapterStakeholderAccess().getRolesKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getChapterStakeholderAccess().getPersonsKeyword_5_0())), new TokenAlias(false, false, grammarAccess.getChapterStakeholderAccess().getPersonsKeyword_5_0()));
		match_ChapterTesting_TestCasesKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getChapterTestingAccess().getTestCasesKeyword_3_0());
		match_ChapterTesting_TestMethodsKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getChapterTestingAccess().getTestMethodsKeyword_2_0());
		match_ThenStep_IntoKeyword_9_0_0_q = new TokenAlias(false, true, grammarAccess.getThenStepAccess().getIntoKeyword_9_0_0());
		match_WhenStep_IntoKeyword_8_0_0_q = new TokenAlias(false, true, grammarAccess.getWhenStepAccess().getIntoKeyword_8_0_0());
		match_XBlockExpression_SemicolonKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getXBlockExpressionAccess().getSemicolonKeyword_2_1());
		match_XExpressionInClosure_SemicolonKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getXExpressionInClosureAccess().getSemicolonKeyword_1_1());
		match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2()));
		match_XImportDeclaration_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getXImportDeclarationAccess().getSemicolonKeyword_2());
		match_XParenthesizedExpression_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
		match_XParenthesizedExpression_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getArrayBracketsRule())
			return getArrayBracketsToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOpSingleAssignRule())
			return getOpSingleAssignToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * ArrayBrackets :
	 * 	'[' ']'
	 * ;
	 */
	protected String getArrayBracketsToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[]";
	}
	
	/**
	 * OpSingleAssign:
	 * 	'='
	 * ;
	 */
	protected String getOpSingleAssignToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ChapterEnvironment_EnvVariablesKeyword_3_0_q.equals(syntax))
				emit_ChapterEnvironment_EnvVariablesKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterEnvironment_InfrastructureKeyword_2_0_q.equals(syntax))
				emit_ChapterEnvironment_InfrastructureKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterPersistence_DatabasesKeyword_2_0_q.equals(syntax))
				emit_ChapterPersistence_DatabasesKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterPersistence_DatasourcesKeyword_3_0_q.equals(syntax))
				emit_ChapterPersistence_DatasourcesKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterPersistence_PersistenceUnitKeyword_4_0_q.equals(syntax))
				emit_ChapterPersistence_PersistenceUnitKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterPersistence___PersistenceUnitKeyword_4_0_or___DatasourcesKeyword_3_0_PersistenceUnitKeyword_4_0____q.equals(syntax))
				emit_ChapterPersistence___PersistenceUnitKeyword_4_0_or___DatasourcesKeyword_3_0_PersistenceUnitKeyword_4_0____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterProjectManagement_ContinousIntegrationKeyword_6_0_q.equals(syntax))
				emit_ChapterProjectManagement_ContinousIntegrationKeyword_6_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterProjectManagement_DistroManagementKeyword_5_0_q.equals(syntax))
				emit_ChapterProjectManagement_DistroManagementKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterProjectManagement_IssueManagementKeyword_4_0_q.equals(syntax))
				emit_ChapterProjectManagement_IssueManagementKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterProjectManagement_ProjectsKeyword_2_0_q.equals(syntax))
				emit_ChapterProjectManagement_ProjectsKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterProjectManagement_SourceCodeManagementKeyword_3_0_q.equals(syntax))
				emit_ChapterProjectManagement_SourceCodeManagementKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterProjectManagement___ContinousIntegrationKeyword_6_0_or___IssueManagementKeyword_4_0_ContinousIntegrationKeyword_6_0___or___SourceCodeManagementKeyword_3_0___ContinousIntegrationKeyword_6_0_or___IssueManagementKeyword_4_0_ContinousIntegrationKeyword_6_0_______or_____IssueManagementKeyword_4_0_or___SourceCodeManagementKeyword_3_0_IssueManagementKeyword_4_0____q_DistroManagementKeyword_5_0_ContinousIntegrationKeyword_6_0____q.equals(syntax))
				emit_ChapterProjectManagement___ContinousIntegrationKeyword_6_0_or___IssueManagementKeyword_4_0_ContinousIntegrationKeyword_6_0___or___SourceCodeManagementKeyword_3_0___ContinousIntegrationKeyword_6_0_or___IssueManagementKeyword_4_0_ContinousIntegrationKeyword_6_0_______or_____IssueManagementKeyword_4_0_or___SourceCodeManagementKeyword_3_0_IssueManagementKeyword_4_0____q_DistroManagementKeyword_5_0_ContinousIntegrationKeyword_6_0____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterProjectStructure_PropertiesKeyword_3_0_q.equals(syntax))
				emit_ChapterProjectStructure_PropertiesKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterStakeholder_GroupsKeyword_3_0_q.equals(syntax))
				emit_ChapterStakeholder_GroupsKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterStakeholder_OrganizationsKeyword_2_0_q.equals(syntax))
				emit_ChapterStakeholder_OrganizationsKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterStakeholder_PersonsKeyword_5_0_q.equals(syntax))
				emit_ChapterStakeholder_PersonsKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterStakeholder_RolesKeyword_4_0_q.equals(syntax))
				emit_ChapterStakeholder_RolesKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterStakeholder___PersonsKeyword_5_0_or___GroupsKeyword_3_0_q_PersonsKeyword_5_0___or___GroupsKeyword_3_0_q_RolesKeyword_4_0_PersonsKeyword_5_0____q.equals(syntax))
				emit_ChapterStakeholder___PersonsKeyword_5_0_or___GroupsKeyword_3_0_q_PersonsKeyword_5_0___or___GroupsKeyword_3_0_q_RolesKeyword_4_0_PersonsKeyword_5_0____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterTesting_TestCasesKeyword_3_0_q.equals(syntax))
				emit_ChapterTesting_TestCasesKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChapterTesting_TestMethodsKeyword_2_0_q.equals(syntax))
				emit_ChapterTesting_TestMethodsKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ThenStep_IntoKeyword_9_0_0_q.equals(syntax))
				emit_ThenStep_IntoKeyword_9_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_WhenStep_IntoKeyword_8_0_0_q.equals(syntax))
				emit_WhenStep_IntoKeyword_8_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XBlockExpression_SemicolonKeyword_2_1_q.equals(syntax))
				emit_XBlockExpression_SemicolonKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XExpressionInClosure_SemicolonKeyword_1_1_q.equals(syntax))
				emit_XExpressionInClosure_SemicolonKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q.equals(syntax))
				emit_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XImportDeclaration_SemicolonKeyword_2_q.equals(syntax))
				emit_XImportDeclaration_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XParenthesizedExpression_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_XParenthesizedExpression_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XParenthesizedExpression_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_XParenthesizedExpression_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'envVariables'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'environment' '{' 'infrastructure'? (ambiguity) 'runtime' runtime=Runtime
	 *     (rule start) 'environment' '{' 'infrastructure'? (ambiguity) '}' (rule start)
	 *     infrastructure+=Level1Attribute (ambiguity) 'runtime' runtime=Runtime
	 *     infrastructure+=Level1Attribute (ambiguity) '}' (rule end)
	 */
	protected void emit_ChapterEnvironment_EnvVariablesKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'infrastructure'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'environment' '{' (ambiguity) 'envVariables' '}' (rule start)
	 *     (rule start) 'environment' '{' (ambiguity) 'envVariables' testMethods+=Level1Attribute
	 *     (rule start) 'environment' '{' (ambiguity) 'envVariables'? 'runtime' runtime=Runtime
	 *     (rule start) 'environment' '{' (ambiguity) 'envVariables'? '}' (rule start)
	 */
	protected void emit_ChapterEnvironment_InfrastructureKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'databases'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'persistence' '{' (ambiguity) 'datasources' datasources+=Level1Attribute
	 *     (rule start) 'persistence' '{' (ambiguity) 'datasources'? 'persistenceUnit' persistenceUnits+=Level1Attribute
	 *     (rule start) 'persistence' '{' (ambiguity) 'datasources'? 'persistenceUnit'? 'idType' javaType=JvmTypeReference
	 *     (rule start) 'persistence' '{' (ambiguity) 'datasources'? 'persistenceUnit'? '}' (rule start)
	 *     (rule start) 'persistence' '{' (ambiguity) 'datasources'? 'persistenceUnit'? customIds?='customIds'
	 *     (rule start) 'persistence' '{' (ambiguity) 'datasources'? 'persistenceUnit'? entities+=Entity
	 *     (rule start) 'persistence' '{' (ambiguity) 'datasources'? 'persistenceUnit'? enumerations+=Enumeration
	 *     (rule start) 'persistence' '{' (ambiguity) 'datasources'? 'persistenceUnit'? relationships+=Relationship
	 *     (rule start) 'persistence' '{' (ambiguity) (('datasources' 'persistenceUnit') | 'persistenceUnit')? '}' (rule start)
	 */
	protected void emit_ChapterPersistence_DatabasesKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'datasources'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'persistence' '{' 'databases'? (ambiguity) 'persistenceUnit' persistenceUnits+=Level1Attribute
	 *     (rule start) 'persistence' '{' 'databases'? (ambiguity) 'persistenceUnit'? 'idType' javaType=JvmTypeReference
	 *     (rule start) 'persistence' '{' 'databases'? (ambiguity) 'persistenceUnit'? '}' (rule start)
	 *     (rule start) 'persistence' '{' 'databases'? (ambiguity) 'persistenceUnit'? customIds?='customIds'
	 *     (rule start) 'persistence' '{' 'databases'? (ambiguity) 'persistenceUnit'? entities+=Entity
	 *     (rule start) 'persistence' '{' 'databases'? (ambiguity) 'persistenceUnit'? enumerations+=Enumeration
	 *     (rule start) 'persistence' '{' 'databases'? (ambiguity) 'persistenceUnit'? relationships+=Relationship
	 *     databases+=Database (ambiguity) 'persistenceUnit' persistenceUnits+=Level1Attribute
	 *     databases+=Database (ambiguity) 'persistenceUnit'? 'idType' javaType=JvmTypeReference
	 *     databases+=Database (ambiguity) 'persistenceUnit'? '}' (rule end)
	 *     databases+=Database (ambiguity) 'persistenceUnit'? customIds?='customIds'
	 *     databases+=Database (ambiguity) 'persistenceUnit'? entities+=Entity
	 *     databases+=Database (ambiguity) 'persistenceUnit'? enumerations+=Enumeration
	 *     databases+=Database (ambiguity) 'persistenceUnit'? relationships+=Relationship
	 */
	protected void emit_ChapterPersistence_DatasourcesKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'persistenceUnit'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'persistence' '{' 'databases'? 'datasources'? (ambiguity) 'idType' javaType=JvmTypeReference
	 *     (rule start) 'persistence' '{' 'databases'? 'datasources'? (ambiguity) '}' (rule start)
	 *     (rule start) 'persistence' '{' 'databases'? 'datasources'? (ambiguity) customIds?='customIds'
	 *     (rule start) 'persistence' '{' 'databases'? 'datasources'? (ambiguity) entities+=Entity
	 *     (rule start) 'persistence' '{' 'databases'? 'datasources'? (ambiguity) enumerations+=Enumeration
	 *     (rule start) 'persistence' '{' 'databases'? 'datasources'? (ambiguity) relationships+=Relationship
	 *     databases+=Database 'datasources'? (ambiguity) 'idType' javaType=JvmTypeReference
	 *     databases+=Database 'datasources'? (ambiguity) '}' (rule end)
	 *     databases+=Database 'datasources'? (ambiguity) customIds?='customIds'
	 *     databases+=Database 'datasources'? (ambiguity) entities+=Entity
	 *     databases+=Database 'datasources'? (ambiguity) enumerations+=Enumeration
	 *     databases+=Database 'datasources'? (ambiguity) relationships+=Relationship
	 *     datasources+=Level1Attribute (ambiguity) 'idType' javaType=JvmTypeReference
	 *     datasources+=Level1Attribute (ambiguity) '}' (rule end)
	 *     datasources+=Level1Attribute (ambiguity) customIds?='customIds'
	 *     datasources+=Level1Attribute (ambiguity) entities+=Entity
	 *     datasources+=Level1Attribute (ambiguity) enumerations+=Enumeration
	 *     datasources+=Level1Attribute (ambiguity) relationships+=Relationship
	 */
	protected void emit_ChapterPersistence_PersistenceUnitKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (('datasources' 'persistenceUnit') | 'persistenceUnit')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'persistence' '{' 'databases'? (ambiguity) '}' (rule start)
	 */
	protected void emit_ChapterPersistence___PersistenceUnitKeyword_4_0_or___DatasourcesKeyword_3_0_PersistenceUnitKeyword_4_0____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'continousIntegration'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'management' '{' 'projects'? 'sourceCodeManagement'? 'issueManagement'? 'distroManagement'? (ambiguity) '}' (rule start)
	 *     distroManagement+=Level1Attribute (ambiguity) '}' (rule end)
	 *     issueManagement+=Level1Attribute 'distroManagement'? (ambiguity) '}' (rule end)
	 *     projects+=DevProject 'sourceCodeManagement'? 'issueManagement'? 'distroManagement'? (ambiguity) '}' (rule end)
	 *     scm+=Level1Attribute 'issueManagement'? 'distroManagement'? (ambiguity) '}' (rule end)
	 */
	protected void emit_ChapterProjectManagement_ContinousIntegrationKeyword_6_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'distroManagement'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'management' '{' 'projects'? 'sourceCodeManagement'? 'issueManagement'? (ambiguity) 'continousIntegration' ci+=Level1Attribute
	 *     (rule start) 'management' '{' 'projects'? 'sourceCodeManagement'? 'issueManagement'? (ambiguity) 'continousIntegration'? '}' (rule start)
	 *     issueManagement+=Level1Attribute (ambiguity) 'continousIntegration' ci+=Level1Attribute
	 *     issueManagement+=Level1Attribute (ambiguity) 'continousIntegration'? '}' (rule end)
	 *     projects+=DevProject 'sourceCodeManagement'? 'issueManagement'? (ambiguity) 'continousIntegration' ci+=Level1Attribute
	 *     projects+=DevProject 'sourceCodeManagement'? 'issueManagement'? (ambiguity) 'continousIntegration'? '}' (rule end)
	 *     scm+=Level1Attribute 'issueManagement'? (ambiguity) 'continousIntegration' ci+=Level1Attribute
	 *     scm+=Level1Attribute 'issueManagement'? (ambiguity) 'continousIntegration'? '}' (rule end)
	 */
	protected void emit_ChapterProjectManagement_DistroManagementKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'issueManagement'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'management' '{' 'projects'? 'sourceCodeManagement'? (ambiguity) 'distroManagement' distroManagement+=Level1Attribute
	 *     (rule start) 'management' '{' 'projects'? 'sourceCodeManagement'? (ambiguity) 'distroManagement'? 'continousIntegration' ci+=Level1Attribute
	 *     (rule start) 'management' '{' 'projects'? 'sourceCodeManagement'? (ambiguity) 'distroManagement'? 'continousIntegration'? '}' (rule start)
	 *     projects+=DevProject 'sourceCodeManagement'? (ambiguity) 'distroManagement' distroManagement+=Level1Attribute
	 *     projects+=DevProject 'sourceCodeManagement'? (ambiguity) 'distroManagement'? 'continousIntegration' ci+=Level1Attribute
	 *     projects+=DevProject 'sourceCodeManagement'? (ambiguity) 'distroManagement'? 'continousIntegration'? '}' (rule end)
	 *     scm+=Level1Attribute (ambiguity) 'distroManagement' distroManagement+=Level1Attribute
	 *     scm+=Level1Attribute (ambiguity) 'distroManagement'? 'continousIntegration' ci+=Level1Attribute
	 *     scm+=Level1Attribute (ambiguity) 'distroManagement'? 'continousIntegration'? '}' (rule end)
	 */
	protected void emit_ChapterProjectManagement_IssueManagementKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'projects'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         (rule start) 
	 *         'management' 
	 *         '{' 
	 *         (ambiguity) 
	 *         (
	 *             'continousIntegration' | 
	 *             ('sourceCodeManagement' ('continousIntegration' | ('issueManagement' 'continousIntegration'))) | 
	 *             ('issueManagement' 'continousIntegration') | 
	 *             ((('sourceCodeManagement' 'issueManagement') | 'issueManagement')? 'distroManagement' 'continousIntegration')
	 *         )? 
	 *         '}' 
	 *         (rule start)
	 *     )
	 *     (rule start) 'management' '{' (ambiguity) 'sourceCodeManagement' scm+=Level1Attribute
	 *     (rule start) 'management' '{' (ambiguity) 'sourceCodeManagement'? 'issueManagement' issueManagement+=Level1Attribute
	 *     (rule start) 'management' '{' (ambiguity) 'sourceCodeManagement'? 'issueManagement'? 'distroManagement' distroManagement+=Level1Attribute
	 *     (rule start) 'management' '{' (ambiguity) 'sourceCodeManagement'? 'issueManagement'? 'distroManagement'? 'continousIntegration' ci+=Level1Attribute
	 *     (rule start) 'management' '{' (ambiguity) 'sourceCodeManagement'? 'issueManagement'? 'distroManagement'? 'continousIntegration'? '}' (rule start)
	 */
	protected void emit_ChapterProjectManagement_ProjectsKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'sourceCodeManagement'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'management' '{' 'projects'? (ambiguity) 'issueManagement' issueManagement+=Level1Attribute
	 *     (rule start) 'management' '{' 'projects'? (ambiguity) 'issueManagement'? 'distroManagement' distroManagement+=Level1Attribute
	 *     (rule start) 'management' '{' 'projects'? (ambiguity) 'issueManagement'? 'distroManagement'? 'continousIntegration' ci+=Level1Attribute
	 *     (rule start) 'management' '{' 'projects'? (ambiguity) 'issueManagement'? 'distroManagement'? 'continousIntegration'? '}' (rule start)
	 *     projects+=DevProject (ambiguity) 'issueManagement' issueManagement+=Level1Attribute
	 *     projects+=DevProject (ambiguity) 'issueManagement'? 'distroManagement' distroManagement+=Level1Attribute
	 *     projects+=DevProject (ambiguity) 'issueManagement'? 'distroManagement'? 'continousIntegration' ci+=Level1Attribute
	 *     projects+=DevProject (ambiguity) 'issueManagement'? 'distroManagement'? 'continousIntegration'? '}' (rule end)
	 */
	protected void emit_ChapterProjectManagement_SourceCodeManagementKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         'continousIntegration' | 
	  *         ('sourceCodeManagement' ('continousIntegration' | ('issueManagement' 'continousIntegration'))) | 
	  *         ('issueManagement' 'continousIntegration') | 
	  *         ((('sourceCodeManagement' 'issueManagement') | 'issueManagement')? 'distroManagement' 'continousIntegration')
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'management' '{' 'projects'? (ambiguity) '}' (rule start)
	 */
	protected void emit_ChapterProjectManagement___ContinousIntegrationKeyword_6_0_or___IssueManagementKeyword_4_0_ContinousIntegrationKeyword_6_0___or___SourceCodeManagementKeyword_3_0___ContinousIntegrationKeyword_6_0_or___IssueManagementKeyword_4_0_ContinousIntegrationKeyword_6_0_______or_____IssueManagementKeyword_4_0_or___SourceCodeManagementKeyword_3_0_IssueManagementKeyword_4_0____q_DistroManagementKeyword_5_0_ContinousIntegrationKeyword_6_0____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'properties'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'structure' '{' (ambiguity) '}' (rule start)
	 *     isNestedParent?='nestedParentProject' (ambiguity) '}' (rule end)
	 */
	protected void emit_ChapterProjectStructure_PropertiesKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'groups'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'stakeholders' '{' 'organizations'? (ambiguity) 'roles' roles+=Role
	 *     (rule start) 'stakeholders' '{' 'organizations'? (ambiguity) 'roles'? 'persons' persons+=Person
	 *     (rule start) 'stakeholders' '{' 'organizations'? (ambiguity) 'roles'? 'persons'? '}' (rule start)
	 *     organizations+=Organization (ambiguity) 'roles' roles+=Role
	 *     organizations+=Organization (ambiguity) 'roles'? 'persons' persons+=Person
	 *     organizations+=Organization (ambiguity) 'roles'? 'persons'? '}' (rule end)
	 */
	protected void emit_ChapterStakeholder_GroupsKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'organizations'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'stakeholders' '{' (ambiguity) 'groups' groups+=Group
	 *     (rule start) 'stakeholders' '{' (ambiguity) 'groups'? 'roles' roles+=Role
	 *     (rule start) 'stakeholders' '{' (ambiguity) 'groups'? 'roles'? 'persons' persons+=Person
	 *     (rule start) 'stakeholders' '{' (ambiguity) 'groups'? 'roles'? 'persons'? '}' (rule start)
	 *     (rule start) 'stakeholders' '{' (ambiguity) ('persons' | ('groups'? 'roles' 'persons') | ('groups'? 'persons'))? '}' (rule start)
	 */
	protected void emit_ChapterStakeholder_OrganizationsKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'persons'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'stakeholders' '{' 'organizations'? 'groups'? 'roles'? (ambiguity) '}' (rule start)
	 *     groups+=Group 'roles'? (ambiguity) '}' (rule end)
	 *     organizations+=Organization 'groups'? 'roles'? (ambiguity) '}' (rule end)
	 *     roles+=Role (ambiguity) '}' (rule end)
	 */
	protected void emit_ChapterStakeholder_PersonsKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'roles'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'stakeholders' '{' 'organizations'? 'groups'? (ambiguity) 'persons' persons+=Person
	 *     (rule start) 'stakeholders' '{' 'organizations'? 'groups'? (ambiguity) 'persons'? '}' (rule start)
	 *     groups+=Group (ambiguity) 'persons' persons+=Person
	 *     groups+=Group (ambiguity) 'persons'? '}' (rule end)
	 *     organizations+=Organization 'groups'? (ambiguity) 'persons' persons+=Person
	 *     organizations+=Organization 'groups'? (ambiguity) 'persons'? '}' (rule end)
	 */
	protected void emit_ChapterStakeholder_RolesKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('persons' | ('groups'? 'roles' 'persons') | ('groups'? 'persons'))?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'stakeholders' '{' 'organizations'? (ambiguity) '}' (rule start)
	 */
	protected void emit_ChapterStakeholder___PersonsKeyword_5_0_or___GroupsKeyword_3_0_q_PersonsKeyword_5_0___or___GroupsKeyword_3_0_q_RolesKeyword_4_0_PersonsKeyword_5_0____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'testCases'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'testing' '{' 'testMethods'? (ambiguity) '}' (rule start)
	 *     testMethods+=Level1Attribute (ambiguity) '}' (rule end)
	 */
	protected void emit_ChapterTesting_TestCasesKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'testMethods'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'testing' '{' (ambiguity) 'testCases' '}' (rule start)
	 *     (rule start) 'testing' '{' (ambiguity) 'testCases' testCases+=Level1Attribute
	 *     (rule start) 'testing' '{' (ambiguity) 'testCases'? '}' (rule start)
	 */
	protected void emit_ChapterTesting_TestMethodsKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'into'?
	 *
	 * This ambiguous syntax occurs at:
	 *     action=BehaviorAction (ambiguity) 'element' subjectElement=[UiElement|QualifiedName]
	 *     value=STRING (ambiguity) 'element' subjectElement=[UiElement|QualifiedName]
	 */
	protected void emit_ThenStep_IntoKeyword_9_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'into'?
	 *
	 * This ambiguous syntax occurs at:
	 *     action=BehaviorAction (ambiguity) 'element' subjectElement=[UiElement|QualifiedName]
	 *     value=STRING (ambiguity) 'element' subjectElement=[UiElement|QualifiedName]
	 */
	protected void emit_WhenStep_IntoKeyword_8_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) '}' ')' (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) '}' (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) expressions+=XExpressionOrVarDeclaration
	 */
	protected void emit_XBlockExpression_SemicolonKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) expressions+=XExpressionOrVarDeclaration
	 */
	protected void emit_XExpressionInClosure_SemicolonKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '=>' returnType=JvmTypeReference
	 */
	protected void emit_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     importedNamespace=QualifiedNameWithWildcard (ambiguity) (rule end)
	 *     importedType=[JvmDeclaredType|QualifiedName] (ambiguity) (rule end)
	 *     memberName=ValidID (ambiguity) (rule end)
	 *     wildcard?='*' (ambiguity) (rule end)
	 */
	protected void emit_XImportDeclaration_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '#' '[' ']' (rule start)
	 *     (rule start) (ambiguity) '#' '[' elements+=XExpression
	 *     (rule start) (ambiguity) '#' '{' '}' (rule start)
	 *     (rule start) (ambiguity) '#' '{' elements+=XExpression
	 *     (rule start) (ambiguity) '<' typeArguments+=JvmArgumentTypeReference
	 *     (rule start) (ambiguity) '[' declaredFormalParameters+=JvmFormalParameter
	 *     (rule start) (ambiguity) '[' explicitSyntax?='|'
	 *     (rule start) (ambiguity) '[' expression=XExpressionInClosure
	 *     (rule start) (ambiguity) 'do' body=XExpression
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' ')' eachExpression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' updateExpressions+=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' expression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'for' '(' initExpressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) 'if' '(' if=XExpression
	 *     (rule start) (ambiguity) 'new' constructor=[JvmConstructor|QualifiedName]
	 *     (rule start) (ambiguity) 'null' (rule start)
	 *     (rule start) (ambiguity) 'return' (rule start)
	 *     (rule start) (ambiguity) 'return' expression=XExpression
	 *     (rule start) (ambiguity) 'switch' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' switch=XExpression
	 *     (rule start) (ambiguity) 'synchronized' '(' param=XExpression
	 *     (rule start) (ambiguity) 'throw' expression=XExpression
	 *     (rule start) (ambiguity) 'try' expression=XExpression
	 *     (rule start) (ambiguity) 'typeof' '(' type=[JvmType|QualifiedName]
	 *     (rule start) (ambiguity) 'while' '(' predicate=XExpression
	 *     (rule start) (ambiguity) '{' '}' (rule start)
	 *     (rule start) (ambiguity) '{' expressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|FeatureCallID]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|IdOrSuper]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpUnary]
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {XAssignment.assignable=}
	 *     (rule start) (ambiguity) {XBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {XCastedExpression.target=}
	 *     (rule start) (ambiguity) {XInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {XMemberFeatureCall.memberCallTarget=}
	 *     (rule start) (ambiguity) {XPostfixOperation.operand=}
	 */
	protected void emit_XParenthesizedExpression_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '#' '[' ']' ')' (rule start)
	 *     (rule start) (ambiguity) '#' '[' elements+=XExpression
	 *     (rule start) (ambiguity) '#' '{' '}' ')' (rule start)
	 *     (rule start) (ambiguity) '#' '{' elements+=XExpression
	 *     (rule start) (ambiguity) '<' typeArguments+=JvmArgumentTypeReference
	 *     (rule start) (ambiguity) '[' declaredFormalParameters+=JvmFormalParameter
	 *     (rule start) (ambiguity) '[' explicitSyntax?='|'
	 *     (rule start) (ambiguity) '[' expression=XExpressionInClosure
	 *     (rule start) (ambiguity) 'do' body=XExpression
	 *     (rule start) (ambiguity) 'false' ')' (rule start)
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' ')' eachExpression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' updateExpressions+=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' expression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'for' '(' initExpressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) 'if' '(' if=XExpression
	 *     (rule start) (ambiguity) 'new' constructor=[JvmConstructor|QualifiedName]
	 *     (rule start) (ambiguity) 'null' ')' (rule start)
	 *     (rule start) (ambiguity) 'return' ')' (rule start)
	 *     (rule start) (ambiguity) 'return' expression=XExpression
	 *     (rule start) (ambiguity) 'switch' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' switch=XExpression
	 *     (rule start) (ambiguity) 'synchronized' '(' param=XExpression
	 *     (rule start) (ambiguity) 'throw' expression=XExpression
	 *     (rule start) (ambiguity) 'try' expression=XExpression
	 *     (rule start) (ambiguity) 'typeof' '(' type=[JvmType|QualifiedName]
	 *     (rule start) (ambiguity) 'while' '(' predicate=XExpression
	 *     (rule start) (ambiguity) '{' '}' ')' (rule start)
	 *     (rule start) (ambiguity) '{' expressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|FeatureCallID]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|IdOrSuper]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpUnary]
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {XAssignment.assignable=}
	 *     (rule start) (ambiguity) {XBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {XCastedExpression.target=}
	 *     (rule start) (ambiguity) {XInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {XMemberFeatureCall.memberCallTarget=}
	 *     (rule start) (ambiguity) {XPostfixOperation.operand=}
	 */
	protected void emit_XParenthesizedExpression_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
