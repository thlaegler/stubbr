/*
 * generated by Xtext 2.10.0
 */
package com.laegler.stubbr.lang.serializer;

import com.google.inject.Inject;
import com.laegler.stubbr.lang.services.StubbrLangGrammarAccess;
import com.laegler.stubbr.lang.stubbrLang.Address;
import com.laegler.stubbr.lang.stubbrLang.Annotation;
import com.laegler.stubbr.lang.stubbrLang.Attribute;
import com.laegler.stubbr.lang.stubbrLang.Birthday;
import com.laegler.stubbr.lang.stubbrLang.BusinessProcess;
import com.laegler.stubbr.lang.stubbrLang.Button;
import com.laegler.stubbr.lang.stubbrLang.CallActivity;
import com.laegler.stubbr.lang.stubbrLang.ChapterBehavior;
import com.laegler.stubbr.lang.stubbrLang.ChapterBusinessProcesses;
import com.laegler.stubbr.lang.stubbrLang.ChapterEnvironment;
import com.laegler.stubbr.lang.stubbrLang.ChapterGlobals;
import com.laegler.stubbr.lang.stubbrLang.ChapterPersistence;
import com.laegler.stubbr.lang.stubbrLang.ChapterPresentation;
import com.laegler.stubbr.lang.stubbrLang.ChapterProjectManagement;
import com.laegler.stubbr.lang.stubbrLang.ChapterProjectStructure;
import com.laegler.stubbr.lang.stubbrLang.ChapterStakeholder;
import com.laegler.stubbr.lang.stubbrLang.ChapterTesting;
import com.laegler.stubbr.lang.stubbrLang.ChapterWebservice;
import com.laegler.stubbr.lang.stubbrLang.CheckBoxGroup;
import com.laegler.stubbr.lang.stubbrLang.DataIO;
import com.laegler.stubbr.lang.stubbrLang.Database;
import com.laegler.stubbr.lang.stubbrLang.DevProject;
import com.laegler.stubbr.lang.stubbrLang.DiBounds;
import com.laegler.stubbr.lang.stubbrLang.DiDiagram;
import com.laegler.stubbr.lang.stubbrLang.DiEdge;
import com.laegler.stubbr.lang.stubbrLang.DiPlane;
import com.laegler.stubbr.lang.stubbrLang.DiShape;
import com.laegler.stubbr.lang.stubbrLang.DiWaypoint;
import com.laegler.stubbr.lang.stubbrLang.Documentation;
import com.laegler.stubbr.lang.stubbrLang.Entity;
import com.laegler.stubbr.lang.stubbrLang.Enumeration;
import com.laegler.stubbr.lang.stubbrLang.Event;
import com.laegler.stubbr.lang.stubbrLang.Feature;
import com.laegler.stubbr.lang.stubbrLang.Flow;
import com.laegler.stubbr.lang.stubbrLang.GatewayConverging;
import com.laegler.stubbr.lang.stubbrLang.GatewayDiverging;
import com.laegler.stubbr.lang.stubbrLang.GivenStep;
import com.laegler.stubbr.lang.stubbrLang.Group;
import com.laegler.stubbr.lang.stubbrLang.InputField;
import com.laegler.stubbr.lang.stubbrLang.Lane;
import com.laegler.stubbr.lang.stubbrLang.Layout;
import com.laegler.stubbr.lang.stubbrLang.Level1Attribute;
import com.laegler.stubbr.lang.stubbrLang.ListView;
import com.laegler.stubbr.lang.stubbrLang.Name;
import com.laegler.stubbr.lang.stubbrLang.Option;
import com.laegler.stubbr.lang.stubbrLang.Organization;
import com.laegler.stubbr.lang.stubbrLang.OutputText;
import com.laegler.stubbr.lang.stubbrLang.Person;
import com.laegler.stubbr.lang.stubbrLang.Poool;
import com.laegler.stubbr.lang.stubbrLang.RadioButtonGroup;
import com.laegler.stubbr.lang.stubbrLang.Relationship;
import com.laegler.stubbr.lang.stubbrLang.RestWebservice;
import com.laegler.stubbr.lang.stubbrLang.Role;
import com.laegler.stubbr.lang.stubbrLang.Scenario;
import com.laegler.stubbr.lang.stubbrLang.SendData;
import com.laegler.stubbr.lang.stubbrLang.SendMessage;
import com.laegler.stubbr.lang.stubbrLang.SequenceFlow;
import com.laegler.stubbr.lang.stubbrLang.SoapWebservice;
import com.laegler.stubbr.lang.stubbrLang.Stubb;
import com.laegler.stubbr.lang.stubbrLang.StubbrLangPackage;
import com.laegler.stubbr.lang.stubbrLang.Styling;
import com.laegler.stubbr.lang.stubbrLang.SubProcess;
import com.laegler.stubbr.lang.stubbrLang.Task;
import com.laegler.stubbr.lang.stubbrLang.ThenStep;
import com.laegler.stubbr.lang.stubbrLang.Transition;
import com.laegler.stubbr.lang.stubbrLang.Upload;
import com.laegler.stubbr.lang.stubbrLang.View;
import com.laegler.stubbr.lang.stubbrLang.WhenStep;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class StubbrLangSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private StubbrLangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StubbrLangPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StubbrLangPackage.ADDRESS:
				sequence_Address(context, (Address) semanticObject); 
				return; 
			case StubbrLangPackage.ANNOTATION:
				sequence_Annotation(context, (Annotation) semanticObject); 
				return; 
			case StubbrLangPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case StubbrLangPackage.BIRTHDAY:
				sequence_Birthday(context, (Birthday) semanticObject); 
				return; 
			case StubbrLangPackage.BUSINESS_PROCESS:
				sequence_BusinessProcess(context, (BusinessProcess) semanticObject); 
				return; 
			case StubbrLangPackage.BUTTON:
				sequence_Button(context, (Button) semanticObject); 
				return; 
			case StubbrLangPackage.CALL_ACTIVITY:
				sequence_CallActivity(context, (CallActivity) semanticObject); 
				return; 
			case StubbrLangPackage.CHAPTER_BEHAVIOR:
				sequence_ChapterBehavior(context, (ChapterBehavior) semanticObject); 
				return; 
			case StubbrLangPackage.CHAPTER_BUSINESS_PROCESSES:
				sequence_ChapterBusinessProcesses(context, (ChapterBusinessProcesses) semanticObject); 
				return; 
			case StubbrLangPackage.CHAPTER_ENVIRONMENT:
				sequence_ChapterEnvironment(context, (ChapterEnvironment) semanticObject); 
				return; 
			case StubbrLangPackage.CHAPTER_GLOBALS:
				sequence_ChapterGlobals(context, (ChapterGlobals) semanticObject); 
				return; 
			case StubbrLangPackage.CHAPTER_PERSISTENCE:
				sequence_ChapterPersistence(context, (ChapterPersistence) semanticObject); 
				return; 
			case StubbrLangPackage.CHAPTER_PRESENTATION:
				sequence_ChapterPresentation(context, (ChapterPresentation) semanticObject); 
				return; 
			case StubbrLangPackage.CHAPTER_PROJECT_MANAGEMENT:
				sequence_ChapterProjectManagement(context, (ChapterProjectManagement) semanticObject); 
				return; 
			case StubbrLangPackage.CHAPTER_PROJECT_STRUCTURE:
				sequence_ChapterProjectStructure(context, (ChapterProjectStructure) semanticObject); 
				return; 
			case StubbrLangPackage.CHAPTER_STAKEHOLDER:
				sequence_ChapterStakeholder(context, (ChapterStakeholder) semanticObject); 
				return; 
			case StubbrLangPackage.CHAPTER_TESTING:
				sequence_ChapterTesting(context, (ChapterTesting) semanticObject); 
				return; 
			case StubbrLangPackage.CHAPTER_WEBSERVICE:
				sequence_ChapterWebservice(context, (ChapterWebservice) semanticObject); 
				return; 
			case StubbrLangPackage.CHECK_BOX_GROUP:
				sequence_CheckBoxGroup(context, (CheckBoxGroup) semanticObject); 
				return; 
			case StubbrLangPackage.DATA_IO:
				sequence_DataIO(context, (DataIO) semanticObject); 
				return; 
			case StubbrLangPackage.DATABASE:
				sequence_Database(context, (Database) semanticObject); 
				return; 
			case StubbrLangPackage.DEV_PROJECT:
				sequence_DevProject(context, (DevProject) semanticObject); 
				return; 
			case StubbrLangPackage.DI_BOUNDS:
				sequence_DiBounds(context, (DiBounds) semanticObject); 
				return; 
			case StubbrLangPackage.DI_DIAGRAM:
				sequence_DiDiagram(context, (DiDiagram) semanticObject); 
				return; 
			case StubbrLangPackage.DI_EDGE:
				sequence_DiEdge(context, (DiEdge) semanticObject); 
				return; 
			case StubbrLangPackage.DI_PLANE:
				sequence_DiPlane(context, (DiPlane) semanticObject); 
				return; 
			case StubbrLangPackage.DI_SHAPE:
				sequence_DiShape(context, (DiShape) semanticObject); 
				return; 
			case StubbrLangPackage.DI_WAYPOINT:
				sequence_DiWaypoint(context, (DiWaypoint) semanticObject); 
				return; 
			case StubbrLangPackage.DOCUMENTATION:
				sequence_Documentation(context, (Documentation) semanticObject); 
				return; 
			case StubbrLangPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case StubbrLangPackage.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case StubbrLangPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case StubbrLangPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case StubbrLangPackage.FLOW:
				sequence_Flow(context, (Flow) semanticObject); 
				return; 
			case StubbrLangPackage.GATEWAY_CONVERGING:
				sequence_GatewayConverging(context, (GatewayConverging) semanticObject); 
				return; 
			case StubbrLangPackage.GATEWAY_DIVERGING:
				sequence_GatewayDiverging(context, (GatewayDiverging) semanticObject); 
				return; 
			case StubbrLangPackage.GIVEN_STEP:
				sequence_GivenStep(context, (GivenStep) semanticObject); 
				return; 
			case StubbrLangPackage.GROUP:
				sequence_Group(context, (Group) semanticObject); 
				return; 
			case StubbrLangPackage.INPUT_FIELD:
				sequence_InputField(context, (InputField) semanticObject); 
				return; 
			case StubbrLangPackage.LANE:
				sequence_Lane(context, (Lane) semanticObject); 
				return; 
			case StubbrLangPackage.LAYOUT:
				sequence_Layout(context, (Layout) semanticObject); 
				return; 
			case StubbrLangPackage.LEVEL1_ATTRIBUTE:
				sequence_Level1Attribute(context, (Level1Attribute) semanticObject); 
				return; 
			case StubbrLangPackage.LIST_VIEW:
				sequence_ListView(context, (ListView) semanticObject); 
				return; 
			case StubbrLangPackage.NAME:
				sequence_Name(context, (Name) semanticObject); 
				return; 
			case StubbrLangPackage.OPTION:
				sequence_Option(context, (Option) semanticObject); 
				return; 
			case StubbrLangPackage.ORGANIZATION:
				sequence_Organization(context, (Organization) semanticObject); 
				return; 
			case StubbrLangPackage.OUTPUT_TEXT:
				sequence_OutputText(context, (OutputText) semanticObject); 
				return; 
			case StubbrLangPackage.PERSON:
				sequence_Person(context, (Person) semanticObject); 
				return; 
			case StubbrLangPackage.POOOL:
				sequence_Pool(context, (Poool) semanticObject); 
				return; 
			case StubbrLangPackage.RADIO_BUTTON_GROUP:
				sequence_RadioButtonGroup(context, (RadioButtonGroup) semanticObject); 
				return; 
			case StubbrLangPackage.RELATIONSHIP:
				sequence_Relationship(context, (Relationship) semanticObject); 
				return; 
			case StubbrLangPackage.REST_WEBSERVICE:
				sequence_RestWebservice(context, (RestWebservice) semanticObject); 
				return; 
			case StubbrLangPackage.ROLE:
				sequence_Role(context, (Role) semanticObject); 
				return; 
			case StubbrLangPackage.RUNTIME:
				sequence_Runtime(context, (com.laegler.stubbr.lang.stubbrLang.Runtime) semanticObject); 
				return; 
			case StubbrLangPackage.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case StubbrLangPackage.SEND_DATA:
				sequence_SendData(context, (SendData) semanticObject); 
				return; 
			case StubbrLangPackage.SEND_MESSAGE:
				sequence_SendMessage(context, (SendMessage) semanticObject); 
				return; 
			case StubbrLangPackage.SEQUENCE_FLOW:
				sequence_SequenceFlow(context, (SequenceFlow) semanticObject); 
				return; 
			case StubbrLangPackage.SOAP_WEBSERVICE:
				sequence_SoapWebservice(context, (SoapWebservice) semanticObject); 
				return; 
			case StubbrLangPackage.STUBB:
				sequence_Stubb(context, (Stubb) semanticObject); 
				return; 
			case StubbrLangPackage.STYLING:
				sequence_Styling(context, (Styling) semanticObject); 
				return; 
			case StubbrLangPackage.SUB_PROCESS:
				sequence_SubProcess(context, (SubProcess) semanticObject); 
				return; 
			case StubbrLangPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			case StubbrLangPackage.THEN_STEP:
				sequence_ThenStep(context, (ThenStep) semanticObject); 
				return; 
			case StubbrLangPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case StubbrLangPackage.UPLOAD:
				sequence_Upload(context, (Upload) semanticObject); 
				return; 
			case StubbrLangPackage.VIEW:
				sequence_View(context, (View) semanticObject); 
				return; 
			case StubbrLangPackage.WHEN_STEP:
				sequence_WhenStep(context, (WhenStep) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     UiElement returns Address
	 *     Element returns Address
	 *     Address returns Address
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         (type=[Entity|QualifiedName] | javaType=[JvmType|QualifiedName])? 
	 *         width=INT? 
	 *         height=INT?
	 *     )
	 */
	protected void sequence_Address(ISerializationContext context, Address semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attachment returns Annotation
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     (name=ID? text=STRING)
	 */
	protected void sequence_Annotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=QualifiedName label=STRING? documentation=STRING? primaryKey?='primaryKey'? (type=[Entity|QualifiedName] | javaType=JvmTypeReference)?)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UiElement returns Birthday
	 *     Element returns Birthday
	 *     Birthday returns Birthday
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         (type=[Entity|QualifiedName] | javaType=[JvmType|QualifiedName])? 
	 *         width=INT? 
	 *         height=INT?
	 *     )
	 */
	protected void sequence_Birthday(ISerializationContext context, Birthday semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BusinessProcess returns BusinessProcess
	 *
	 * Constraint:
	 *     (name=QualifiedName label=STRING? documentation=STRING? (pools+=Pool+ | flowNodes+=FlowNode+))
	 */
	protected void sequence_BusinessProcess(ISerializationContext context, BusinessProcess semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UiElement returns Button
	 *     Element returns Button
	 *     Button returns Button
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         value=STRING? 
	 *         style=[Styling|QualifiedName]? 
	 *         width=INT? 
	 *         height=INT?
	 *     )
	 */
	protected void sequence_Button(ISerializationContext context, Button semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FlowNode returns CallActivity
	 *     Activity returns CallActivity
	 *     CallActivity returns CallActivity
	 *     OptionFlowNode returns CallActivity
	 *
	 * Constraint:
	 *     (name=ID? label=STRING? calledElement=[BusinessProcess|QualifiedName] attachments+=Attachment*)
	 */
	protected void sequence_CallActivity(ISerializationContext context, CallActivity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chapter returns ChapterBehavior
	 *     ChapterBehavior returns ChapterBehavior
	 *
	 * Constraint:
	 *     (features+=Feature+ | (features+=Feature+ specifications+=STRING specifications+=STRING*))?
	 */
	protected void sequence_ChapterBehavior(ISerializationContext context, ChapterBehavior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChapterBusinessProcesses returns ChapterBusinessProcesses
	 *
	 * Constraint:
	 *     processes+=BusinessProcess+
	 */
	protected void sequence_ChapterBusinessProcesses(ISerializationContext context, ChapterBusinessProcesses semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chapter returns ChapterEnvironment
	 *     ChapterEnvironment returns ChapterEnvironment
	 *
	 * Constraint:
	 *     (infrastructure+=Level1Attribute* testMethods+=Level1Attribute* runtime=Runtime?)
	 */
	protected void sequence_ChapterEnvironment(ISerializationContext context, ChapterEnvironment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chapter returns ChapterGlobals
	 *     ChapterGlobals returns ChapterGlobals
	 *
	 * Constraint:
	 *     ((((loggerName=ID loggerType=QualifiedName) | loggerType=QualifiedName)? useSpringMVC?='useSpringMVC') | useSpringMVC?='useSpringMVC')?
	 */
	protected void sequence_ChapterGlobals(ISerializationContext context, ChapterGlobals semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chapter returns ChapterPersistence
	 *     ChapterPersistence returns ChapterPersistence
	 *
	 * Constraint:
	 *     (
	 *         databases+=Database* 
	 *         datasources+=Level1Attribute* 
	 *         persistenceUnits+=Level1Attribute* 
	 *         entities+=Entity* 
	 *         enumerations+=Enumeration* 
	 *         relationships+=Relationship* 
	 *         customIds?='customIds'? 
	 *         javaType=JvmTypeReference?
	 *     )
	 */
	protected void sequence_ChapterPersistence(ISerializationContext context, ChapterPersistence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chapter returns ChapterPresentation
	 *     ChapterPresentation returns ChapterPresentation
	 *
	 * Constraint:
	 *     (
	 *         (uiFramework=UiFramework ((stylings+=Styling+ transitions+=Transition+) | transitions+=Transition+)) | 
	 *         (((uiFramework=UiFramework layouts+=Layout+) | layouts+=Layout+) ((stylings+=Styling+ transitions+=Transition+) | transitions+=Transition+)) | 
	 *         (
	 *             (
	 *                 (uiFramework=UiFramework ((layouts+=Layout+ stylings+=Styling+) | stylings+=Styling+)) | 
	 *                 (layouts+=Layout+ stylings+=Styling+) | 
	 *                 stylings+=Styling+
	 *             )? 
	 *             views+=View+ 
	 *             transitions+=Transition+
	 *         ) | 
	 *         (stylings+=Styling+ transitions+=Transition+) | 
	 *         transitions+=Transition+
	 *     )?
	 */
	protected void sequence_ChapterPresentation(ISerializationContext context, ChapterPresentation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chapter returns ChapterProjectManagement
	 *     ChapterProjectManagement returns ChapterProjectManagement
	 *
	 * Constraint:
	 *     (project+=DevProject* scm+=Level1Attribute* issueManagement+=Level1Attribute* ci+=Level1Attribute*)
	 */
	protected void sequence_ChapterProjectManagement(ISerializationContext context, ChapterProjectManagement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chapter returns ChapterProjectStructure
	 *     ChapterProjectStructure returns ChapterProjectStructure
	 *
	 * Constraint:
	 *     (isNestedParent?='nestedParentProject'? testMethods+=Level1Attribute*)
	 */
	protected void sequence_ChapterProjectStructure(ISerializationContext context, ChapterProjectStructure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chapter returns ChapterStakeholder
	 *     ChapterStakeholder returns ChapterStakeholder
	 *
	 * Constraint:
	 *     (organizations+=Organization* groups+=Group* roles+=Role* persons+=Person*)
	 */
	protected void sequence_ChapterStakeholder(ISerializationContext context, ChapterStakeholder semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chapter returns ChapterTesting
	 *     ChapterTesting returns ChapterTesting
	 *
	 * Constraint:
	 *     (testMethods+=Level1Attribute* testCases+=Level1Attribute*)
	 */
	protected void sequence_ChapterTesting(ISerializationContext context, ChapterTesting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chapter returns ChapterWebservice
	 *     ChapterWebservice returns ChapterWebservice
	 *
	 * Constraint:
	 *     webservices+=Webservice+
	 */
	protected void sequence_ChapterWebservice(ISerializationContext context, ChapterWebservice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UiElement returns CheckBoxGroup
	 *     Element returns CheckBoxGroup
	 *     CheckBoxGroup returns CheckBoxGroup
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         (type=[Entity|QualifiedName] | javaType=[JvmType|QualifiedName])? 
	 *         width=INT? 
	 *         height=INT?
	 *     )
	 */
	protected void sequence_CheckBoxGroup(ISerializationContext context, CheckBoxGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attachment returns DataIO
	 *     DataIO returns DataIO
	 *
	 * Constraint:
	 *     (dataIoType=DataIOType name=ID? label=STRING? javaType=JvmTypeReference?)
	 */
	protected void sequence_DataIO(ISerializationContext context, DataIO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Database returns Database
	 *
	 * Constraint:
	 *     (name=QualifiedName label=STRING? documentation=STRING? type=DatabaseEnum? version=VERSION?)
	 */
	protected void sequence_Database(ISerializationContext context, Database semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DevProject returns DevProject
	 *
	 * Constraint:
	 *     (project=DevProjectType name=QualifiedName label=STRING? documentation=STRING? suffix=QualifiedName?)
	 */
	protected void sequence_DevProject(ISerializationContext context, DevProject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DiDiagramElement returns DiBounds
	 *     DiBounds returns DiBounds
	 *
	 * Constraint:
	 *     (x=INT | y=INT | width=INT | height=INT)+
	 */
	protected void sequence_DiBounds(ISerializationContext context, DiBounds semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DiDiagramElement returns DiDiagram
	 *     DiDiagram returns DiDiagram
	 *
	 * Constraint:
	 *     (name=ID? label=STRING? plane=DiPlane)
	 */
	protected void sequence_DiDiagram(ISerializationContext context, DiDiagram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DiDiagramElement returns DiEdge
	 *     DiPlaneElement returns DiEdge
	 *     DiEdge returns DiEdge
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         sequenceFlow=[SequenceFlow|QualifiedName] 
	 *         sourceDiagramShape=[DiShape|QualifiedName] 
	 *         targetDiagramShape=[DiShape|QualifiedName] 
	 *         waypoints+=DiWaypoint+
	 *     )
	 */
	protected void sequence_DiEdge(ISerializationContext context, DiEdge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DiDiagramElement returns DiPlane
	 *     DiPlane returns DiPlane
	 *
	 * Constraint:
	 *     (name=ID? bpmnElement=[BusinessProcess|QualifiedName]? planeElements+=DiPlaneElement+)
	 */
	protected void sequence_DiPlane(ISerializationContext context, DiPlane semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DiDiagramElement returns DiShape
	 *     DiPlaneElement returns DiShape
	 *     DiShape returns DiShape
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             ((name=ID flowNode=[FlowNode|QualifiedName]) | flowNode=[FlowNode|QualifiedName])? 
	 *             (bounds=DiBounds | isExpanded?='expanded' | isHorizontal?='horizontal')+
	 *         ) | 
	 *         (bounds=DiBounds | isExpanded?='expanded' | isHorizontal?='horizontal')+
	 *     )?
	 */
	protected void sequence_DiShape(ISerializationContext context, DiShape semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DiDiagramElement returns DiWaypoint
	 *     DiWaypoint returns DiWaypoint
	 *
	 * Constraint:
	 *     (x=INT | y=INT)+
	 */
	protected void sequence_DiWaypoint(ISerializationContext context, DiWaypoint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attachment returns Documentation
	 *     Documentation returns Documentation
	 *
	 * Constraint:
	 *     (name=ID? text=STRING)
	 */
	protected void sequence_Documentation(ISerializationContext context, Documentation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=QualifiedName superType=JvmTypeReference? label=STRING? documentation=STRING? attributes+=Attribute*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Enumeration returns Enumeration
	 *
	 * Constraint:
	 *     (name=QualifiedName label=STRING? documentation=STRING? (enumValues+=ID enumValues+=ID*)?)
	 */
	protected void sequence_Enumeration(ISerializationContext context, Enumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FlowNode returns Event
	 *     Event returns Event
	 *     OptionFlowNode returns Event
	 *     InteractionNode returns Event
	 *
	 * Constraint:
	 *     (
	 *         eventType=EventType 
	 *         eventDefinitionType=EventDefinitionType? 
	 *         nonInterrupting?='non-interrupting'? 
	 *         name=ID? 
	 *         label=STRING? 
	 *         dialog=[View|QualifiedName]? 
	 *         attachments+=Attachment*
	 *     )
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     (name=QualifiedName label=STRING? documentation=STRING? specification=STRING? scenarios+=Scenario*)
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attachment returns Flow
	 *     Flow returns Flow
	 *
	 * Constraint:
	 *     (name=ID? label=STRING? targetRef=[FlowNode|QualifiedName])
	 */
	protected void sequence_Flow(ISerializationContext context, Flow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FlowNode returns GatewayConverging
	 *     Gateway returns GatewayConverging
	 *     GatewayConverging returns GatewayConverging
	 *
	 * Constraint:
	 *     (gatewayType=GatewayType name=ID? label=STRING? attachments+=Attachment*)
	 */
	protected void sequence_GatewayConverging(ISerializationContext context, GatewayConverging semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FlowNode returns GatewayDiverging
	 *     Gateway returns GatewayDiverging
	 *     GatewayDiverging returns GatewayDiverging
	 *     OptionFlowNode returns GatewayDiverging
	 *
	 * Constraint:
	 *     (
	 *         gatewayType=GatewayType 
	 *         name=ID? 
	 *         label=STRING? 
	 *         attachments+=Attachment* 
	 *         options+=Option+ 
	 *         gatewayConverging=GatewayConverging
	 *     )
	 */
	protected void sequence_GatewayDiverging(ISerializationContext context, GatewayDiverging semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Step returns GivenStep
	 *     GivenStep returns GivenStep
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         (actor=[Stakeholder|QualifiedName] | actorElement=[UiElement|QualifiedName] | objectWildcard=STRING)
	 *     )
	 */
	protected void sequence_GivenStep(ISerializationContext context, GivenStep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Stakeholder returns Group
	 *     Group returns Group
	 *
	 * Constraint:
	 *     (name=QualifiedName attributes+=Level1Attribute*)
	 */
	protected void sequence_Group(ISerializationContext context, Group semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UiElement returns InputField
	 *     Element returns InputField
	 *     InputField returns InputField
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         (type=[Entity|QualifiedName] | javaType=[JvmType|QualifiedName])? 
	 *         width=INT? 
	 *         height=INT?
	 *     )
	 */
	protected void sequence_InputField(ISerializationContext context, InputField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FlowNode returns Lane
	 *     Lane returns Lane
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         actor=[Stakeholder|QualifiedName]? 
	 *         initializing?='initializing'? 
	 *         flowNodes+=FlowNode+
	 *     )
	 */
	protected void sequence_Lane(ISerializationContext context, Lane semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Layout returns Layout
	 *
	 * Constraint:
	 *     (name=QualifiedName label=STRING? documentation=STRING? type=STRING?)
	 */
	protected void sequence_Layout(ISerializationContext context, Layout semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Level1Attribute returns Level1Attribute
	 *
	 * Constraint:
	 *     (name=QualifiedName label=STRING? documentation=STRING? value=STRING? attributes+=Level1Attribute*)
	 */
	protected void sequence_Level1Attribute(ISerializationContext context, Level1Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UiElement returns ListView
	 *     Element returns ListView
	 *     ListView returns ListView
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         (type=[Entity|QualifiedName] | (javaType=JvmTypeReference action=JvmTypeReference))? 
	 *         width=INT? 
	 *         height=INT?
	 *     )
	 */
	protected void sequence_ListView(ISerializationContext context, ListView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UiElement returns Name
	 *     Element returns Name
	 *     Name returns Name
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         (type=[Entity|QualifiedName] | javaType=[JvmType|QualifiedName])? 
	 *         width=INT? 
	 *         height=INT?
	 *     )
	 */
	protected void sequence_Name(ISerializationContext context, Name semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Option returns Option
	 *
	 * Constraint:
	 *     (
	 *         (default?='default' ((name=ID flowNodes+=OptionFlowNode+) | flowNodes+=OptionFlowNode+)) | 
	 *         (((default?='default' name=ID) | name=ID)? label=STRING flowNodes+=OptionFlowNode+) | 
	 *         (name=ID flowNodes+=OptionFlowNode+) | 
	 *         flowNodes+=OptionFlowNode+
	 *     )?
	 */
	protected void sequence_Option(ISerializationContext context, Option semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Stakeholder returns Organization
	 *     Organization returns Organization
	 *
	 * Constraint:
	 *     (name=QualifiedName attributes+=Level1Attribute*)
	 */
	protected void sequence_Organization(ISerializationContext context, Organization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UiElement returns OutputText
	 *     Element returns OutputText
	 *     OutputText returns OutputText
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         value=STRING? 
	 *         style=[Styling|QualifiedName]? 
	 *         width=INT? 
	 *         height=INT?
	 *     )
	 */
	protected void sequence_OutputText(ISerializationContext context, OutputText semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Stakeholder returns Person
	 *     Person returns Person
	 *
	 * Constraint:
	 *     (name=QualifiedName attributes+=Level1Attribute*)
	 */
	protected void sequence_Person(ISerializationContext context, Person semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pool returns Poool
	 *     InteractionNode returns Poool
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         actor=[Stakeholder|QualifiedName]? 
	 *         initializing?='initializing'? 
	 *         flowNodes+=FlowNode*
	 *     )
	 */
	protected void sequence_Pool(ISerializationContext context, Poool semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UiElement returns RadioButtonGroup
	 *     Element returns RadioButtonGroup
	 *     RadioButtonGroup returns RadioButtonGroup
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         (type=[Entity|QualifiedName] | javaType=[JvmType|QualifiedName])? 
	 *         width=INT? 
	 *         height=INT?
	 *     )
	 */
	protected void sequence_RadioButtonGroup(ISerializationContext context, RadioButtonGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns Relationship
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         from=[Entity|QualifiedName] 
	 *         to=[Entity|QualifiedName] 
	 *         action=XBlockExpression? 
	 *         type=JvmTypeReference?
	 *     )
	 */
	protected void sequence_Relationship(ISerializationContext context, Relationship semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Webservice returns RestWebservice
	 *     RestWebservice returns RestWebservice
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         specification=STRING 
	 *         languages+=RestLanguage 
	 *         languages+=RestLanguage* 
	 *         basepath=STRING 
	 *         excludeEntities+=[Entity|QualifiedName] 
	 *         excludeEntities+=[Entity|QualifiedName]* 
	 *         dtos+=Entity*
	 *     )
	 */
	protected void sequence_RestWebservice(ISerializationContext context, RestWebservice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Stakeholder returns Role
	 *     Role returns Role
	 *
	 * Constraint:
	 *     (name=QualifiedName attributes+=Level1Attribute*)
	 */
	protected void sequence_Role(ISerializationContext context, Role semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Runtime returns Runtime
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         jdkVersion=VERSION? 
	 *         jvm=JvmEnum? 
	 *         version=VERSION?
	 *     )
	 */
	protected void sequence_Runtime(ISerializationContext context, com.laegler.stubbr.lang.stubbrLang.Runtime semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Scenario returns Scenario
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         givenSteps+=GivenStep* 
	 *         whenSteps+=WhenStep* 
	 *         thenSteps+=ThenStep*
	 *     )
	 */
	protected void sequence_Scenario(ISerializationContext context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attachment returns SendData
	 *     SendData returns SendData
	 *
	 * Constraint:
	 *     (name=ID? label=STRING? receivingElement=[FlowNode|QualifiedName] dataType=JvmTypeReference?)
	 */
	protected void sequence_SendData(ISerializationContext context, SendData semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attachment returns SendMessage
	 *     SendMessage returns SendMessage
	 *
	 * Constraint:
	 *     (name=ID? label=STRING? receivingElement=[InteractionNode|QualifiedName] dataType=JvmTypeReference?)
	 */
	protected void sequence_SendMessage(ISerializationContext context, SendMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SequenceFlow returns SequenceFlow
	 *
	 * Constraint:
	 *     (name=ID? label=STRING? sourceRef=[FlowNode|QualifiedName] targetRef=[FlowNode|QualifiedName])
	 */
	protected void sequence_SequenceFlow(ISerializationContext context, SequenceFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Webservice returns SoapWebservice
	 *     SoapWebservice returns SoapWebservice
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         specification=STRING 
	 *         namespace=STRING 
	 *         excludeEntities+=[Entity|QualifiedName] 
	 *         excludeEntities+=[Entity|QualifiedName]* 
	 *         dtos+=Entity*
	 *     )
	 */
	protected void sequence_SoapWebservice(ISerializationContext context, SoapWebservice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Stubb returns Stubb
	 *
	 * Constraint:
	 *     (
	 *         importedNamespace=QualifiedName 
	 *         importSection=XImportSection? 
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         packageName=QualifiedName? 
	 *         prefix=ID? 
	 *         version=VERSION? 
	 *         author=STRING? 
	 *         email=STRING? 
	 *         (languages+=Locale languages+=Locale*)? 
	 *         globals=ChapterGlobals? 
	 *         Stakeholders=ChapterStakeholder? 
	 *         projectManagement=ChapterProjectManagement? 
	 *         environment=ChapterEnvironment? 
	 *         structure=ChapterProjectStructure? 
	 *         persistence=ChapterPersistence? 
	 *         business=ChapterBusinessProcesses? 
	 *         presentation=ChapterPresentation? 
	 *         webservice=ChapterWebservice? 
	 *         behavior=ChapterBehavior? 
	 *         testing=ChapterTesting?
	 *     )
	 */
	protected void sequence_Stubb(ISerializationContext context, Stubb semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Styling returns Styling
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         baseColor=STRING? 
	 *         highLightColor=STRING? 
	 *         textColor=STRING? 
	 *         fontSize=STRING?
	 *     )
	 */
	protected void sequence_Styling(ISerializationContext context, Styling semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FlowNode returns SubProcess
	 *     Activity returns SubProcess
	 *     SubProcess returns SubProcess
	 *     OptionFlowNode returns SubProcess
	 *
	 * Constraint:
	 *     (name=QualifiedName label=STRING? attachments+=Attachment* flowNodes+=FlowNode+)
	 */
	protected void sequence_SubProcess(ISerializationContext context, SubProcess semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FlowNode returns Task
	 *     Activity returns Task
	 *     Task returns Task
	 *     OptionFlowNode returns Task
	 *     InteractionNode returns Task
	 *
	 * Constraint:
	 *     (taskType=TaskType name=ID? label=STRING? dialog=[View|QualifiedName]? attachments+=Attachment*)
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Step returns ThenStep
	 *     ThenStep returns ThenStep
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         (actor=[Stakeholder|QualifiedName] | actorElement=[UiElement|QualifiedName] | objectWildcard=STRING) 
	 *         action=BehaviorAction 
	 *         value=STRING? 
	 *         (subjectElement=[UiElement|QualifiedName] | subjectWildcard=STRING)?
	 *     )
	 */
	protected void sequence_ThenStep(ISerializationContext context, ThenStep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         (
	 *             (from=[UiElement|QualifiedName] to=[UiElement|QualifiedName]) | 
	 *             (name=QualifiedName triggerElement=[UiElement|QualifiedName] target=JvmTypeReference? callToAction=XBlockExpression?)
	 *         )?
	 *     )
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UiElement returns Upload
	 *     Element returns Upload
	 *     Upload returns Upload
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         (type=[Entity|QualifiedName] | javaType=[JvmType|QualifiedName])? 
	 *         width=INT? 
	 *         height=INT?
	 *     )
	 */
	protected void sequence_Upload(ISerializationContext context, Upload semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UiElement returns View
	 *     View returns View
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         layout=[Layout|QualifiedName]? 
	 *         styling=[Styling|QualifiedName]? 
	 *         (assocEntities+=[Entity|QualifiedName] assocEntities+=[Entity|QualifiedName]*)? 
	 *         elements+=Element*
	 *     )
	 */
	protected void sequence_View(ISerializationContext context, View semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Step returns WhenStep
	 *     WhenStep returns WhenStep
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         label=STRING? 
	 *         documentation=STRING? 
	 *         (actor=[Stakeholder|QualifiedName] | actorElement=[UiElement|QualifiedName] | objectWildcard=STRING) 
	 *         action=BehaviorAction 
	 *         value=STRING? 
	 *         (subjectElement=[UiElement|QualifiedName] | subjectWildcard=STRING)
	 *     )
	 */
	protected void sequence_WhenStep(ISerializationContext context, WhenStep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
