package templates.faces.src_main_java.basepack.faces.presenter;

import com.laegler.stubbr.lang.genmodel.Project;
import com.laegler.stubbr.lang.genmodel.StubbrRegistry;
import com.laegler.stubbr.lang.stubbrLang.Stubb;
import org.eclipse.xtend2.lib.StringConcatenation;
import templates.AbstractXtendTemplate;

/**
 * File template for abstract JSF/Faces presenter for all presenters.
 */
@SuppressWarnings("all")
public class AbstractPresenterXtendTemplate extends AbstractXtendTemplate {
  public AbstractPresenterXtendTemplate(final StubbrRegistry stubbr, final Project project) {
    super(stubbr, project);
    this.setFileName("AbstractPresenter");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _basePackage = null;
    if (project!=null) {
      _basePackage=project.getBasePackage();
    }
    _builder.append(_basePackage, "");
    _builder.append(".presenter");
    this.setHeader(_builder.toString());
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("/src/main/java/");
    String _basePackage_1 = null;
    if (project!=null) {
      _basePackage_1=project.getBasePackage();
    }
    String _path = null;
    if (_basePackage_1!=null) {
      _path=this.toPath(_basePackage_1);
    }
    _builder_1.append(_path, "");
    _builder_1.append("/presenter/");
    this.setRelativPath(_builder_1.toString());
    this.setDocumentation("Abstract JSF/Faces presenter for all presenters");
    String _template = this.getTemplate();
    String _withImports = this.withImports(_template);
    this.setContent(_withImports);
  }
  
  private String getTemplate() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import ");
    Project _project = this.getProject();
    String _basePackage = null;
    if (_project!=null) {
      _basePackage=_project.getBasePackage();
    }
    _builder.append(_basePackage, "");
    _builder.append(".*");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    StubbrRegistry _stubbr = this.getStubbr();
    Stubb _stubb = null;
    if (_stubbr!=null) {
      _stubb=_stubbr.getStubb();
    }
    String _packageName = null;
    if (_stubb!=null) {
      _packageName=_stubb.getPackageName();
    }
    _builder.append(_packageName, "");
    _builder.append(".business.config.CustomSeverity");
    _builder.newLineIfNotEmpty();
    _builder.append("import java.text.MessageFormat");
    _builder.newLine();
    _builder.append("import java.util.Map");
    _builder.newLine();
    _builder.append("import java.util.ResourceBundle");
    _builder.newLine();
    _builder.append("import javax.annotation.PostConstruct");
    _builder.newLine();
    _builder.append("import javax.annotation.security.PermitAll");
    _builder.newLine();
    _builder.append("import javax.faces.application.FacesMessage");
    _builder.newLine();
    _builder.append("import javax.faces.application.FacesMessage.Severity");
    _builder.newLine();
    _builder.append("import javax.faces.context.FacesContext");
    _builder.newLine();
    _builder.append("import javax.faces.event.ComponentSystemEvent");
    _builder.newLine();
    _builder.append("import javax.inject.Inject");
    _builder.newLine();
    _builder.append("import javax.servlet.http.HttpServletRequest");
    _builder.newLine();
    _builder.append("import org.joda.time.DateTime");
    _builder.newLine();
    _builder.newLine();
    String _javaDocType = this.getJavaDocType();
    _builder.append(_javaDocType, "");
    _builder.newLineIfNotEmpty();
    _builder.append("abstract class AbstractPresenter {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@");
    String _asImport = this.asImport("javax.inject.Inject");
    _builder.append(_asImport, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("protected ");
    String _loggerType = this.getLoggerType();
    String _asImport_1 = this.asImport(_loggerType);
    _builder.append(_asImport_1, "\t");
    _builder.append(" ");
    String _loggerName = this.getLoggerName();
    _builder.append(_loggerName, "\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@");
    String _asImport_2 = this.asImport("javax.inject.Inject");
    _builder.append(_asImport_2, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("protected ");
    StubbrRegistry _stubbr_1 = this.getStubbr();
    Stubb _stubb_1 = null;
    if (_stubbr_1!=null) {
      _stubb_1=_stubbr_1.getStubb();
    }
    String _packageName_1 = null;
    if (_stubb_1!=null) {
      _packageName_1=_stubb_1.getPackageName();
    }
    String _plus = (_packageName_1 + ".business.config.Config");
    String _asImport_3 = this.asImport(_plus);
    _builder.append(_asImport_3, "\t");
    _builder.append(" config");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@");
    String _asImport_4 = this.asImport("javax.inject.Inject");
    _builder.append(_asImport_4, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("protected ");
    StubbrRegistry _stubbr_2 = this.getStubbr();
    Stubb _stubb_2 = null;
    if (_stubbr_2!=null) {
      _stubb_2=_stubbr_2.getStubb();
    }
    String _packageName_2 = null;
    if (_stubb_2!=null) {
      _packageName_2=_stubb_2.getPackageName();
    }
    String _plus_1 = (_packageName_2 + ".business.context.UserContext");
    String _asImport_5 = this.asImport(_plus_1);
    _builder.append(_asImport_5, "\t");
    _builder.append(" userContext");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@PostConstruct");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def abstract void init()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def abstract void initView()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def abstract ");
    Project _project_1 = this.getProject();
    String _basePackage_1 = null;
    if (_project_1!=null) {
      _basePackage_1=_project_1.getBasePackage();
    }
    String _plus_2 = (_basePackage_1 + ".bean.AbstractViewBean");
    String _asImport_6 = this.asImport(_plus_2);
    _builder.append(_asImport_6, "\t");
    _builder.append(" getBean()");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void onViewLoad(ComponentSystemEvent event) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("initView");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected def String getRequestIp() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val ");
    String _asImport_7 = this.asImport("javax.servlet.http.HttpServletRequest");
    _builder.append(_asImport_7, "\t\t");
    _builder.append(" httpServletRequest = facesContext.externalContext.request as HttpServletRequest");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return httpServletRequest.remoteAddr");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param page");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected def String getOutcomePage(String page, ");
    String _asImport_8 = this.asImport("org.example.stubbr.business.context.Role");
    _builder.append(_asImport_8, "\t");
    _builder.append(" role, boolean isMobile) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (isMobile) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\'pm:pg-\' + page + \'?transition=slide\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Config.PATH_DESKTOP + \'/\' + role + \'/\' + page + \'.xhtml\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected def String getOutcomePage(String page) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getOutcomePage(page, userContext.getRole(), userContext.isMobile)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\tprotected def void handleException(Throwable e) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\tvar String summary = \'Schwerer Technischer Fehler um \' + DateTime.now.toString");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\tvar String detail = \'Schwerer Technischer Fehler um \' + DateTime.now.toString");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\tif (userContext.roleManagmenet || userContext.roleAdmin) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t\tval String stackTrace = ExceptionUtils.getStackTrace(e)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t\tsummary = \'Schwerer Technischer Fehler um \' + DateTime.now.toString + \'. Diese Exception ist geflogen: \' +");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t\t\tstackTrace");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t\tdetail = \'Schwerer Technischer Fehler um \' + DateTime.now.toString");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t");
    String _loggerName_1 = this.getLoggerName();
    _builder.append(_loggerName_1, "\t");
    _builder.append(".error(\'handleException() with {}\', e)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("//\t\tval FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, summary, detail)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\tfacesContext.addMessage(\'growl\', message)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\tprotected def void handleStatus(CQResult response) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\tif (response.status.isMessage) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t\tval Severity severity = getSeverity(response.status.severity)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t\tvar String summary = getString(response.status.resourceKey + \'.summary\', response.params)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t\tvar String detail = getString(response.status.resourceKey + \'.detail\', response.params)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t\tval FacesMessage message = new FacesMessage(severity, summary, detail)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t\tfacesContext.addMessage(\'growl\', message)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t} else {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t\t// Exitseite");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t\t}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected def String getClientIp() {");
    _builder.newLine();
    _builder.append("\t\t");
    String _loggerName_2 = this.getLoggerName();
    _builder.append(_loggerName_2, "\t\t");
    _builder.append(".trace(\'getClientIp() called.\')");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("val HttpServletRequest request = FacesContext.currentInstance.externalContext.request as HttpServletRequest");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var String ipAddress = request.getHeader(\'X-FORWARDED-FOR\')");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (ipAddress == null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ipAddress = request.remoteAddr");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ipAddress");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected def String getString(String key) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getString(key, null)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected def String getString(String key, Map<String, String> params) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var String _string = \'\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("_string = resourceBundle.getString(key)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e1) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    String _loggerName_3 = this.getLoggerName();
    _builder.append(_loggerName_3, "\t\t\t");
    _builder.append(".warn(\'Resource-Key not found: {}\', key)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("_string = messageBundle.getString(key)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (Exception e2) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    String _loggerName_4 = this.getLoggerName();
    _builder.append(_loggerName_4, "\t\t\t\t");
    _builder.append(".error(\'Message-Key not found: {}\', key)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("return \'???\' + key + \'???\'");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (_string == null || _string.isEmpty || _string.startsWith(\'???\')) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (params != null && !params.isEmpty) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return MessageFormat.format(_string, params);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return _string;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected def ResourceBundle getResourceBundle() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val String bundleName = config.getResourceBundleName");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ResourceBundle.getBundle(bundleName, userContext.locale)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected def ResourceBundle getMessageBundle() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val String bundleName = config.getMessageBundleName");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ResourceBundle.getBundle(bundleName, userContext.locale)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the facesContext");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected def FacesContext getFacesContext() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("FacesContext.currentInstance");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private def Severity getSeverity(CustomSeverity severity) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch (severity) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case MESSAGE: return FacesMessage.SEVERITY_INFO");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case INFO: return FacesMessage.SEVERITY_INFO");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case WARNING: return FacesMessage.SEVERITY_WARN");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case ERROR: return FacesMessage.SEVERITY_ERROR");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//\tpublic def void onViewLoad(ComponentSystemEvent event) {");
    _builder.newLine();
    _builder.append("//\t\tinitView");
    _builder.newLine();
    _builder.append("//\t\tif (!\'admin\'.equals(facesContext.getExternalContext().getSessionMap().get(\'role\'))) {");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("//\t\t\tval ConfigurableNavigationHandler nav = facesContext.getApplication().");
    _builder.newLine();
    _builder.append("//\t\t\t\tgetNavigationHandler() as ConfigurableNavigationHandler;");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("//\t\t\tnav.performNavigation(\'access-denied\');");
    _builder.newLine();
    _builder.append("//\t\t}");
    _builder.newLine();
    _builder.append("//\t}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@PermitAll");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected def long getHttpPostParam(String paramName) throws ");
    String _asImport_9 = this.asImport("java.lang.RuntimeException");
    _builder.append(_asImport_9, "\t");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("val long paramId = 0;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val String paramIdString = getFacesContext().externalContext.requestParameterMap.get(paramName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (paramIdString != null && !paramIdString.isEmpty() && !paramIdString.equals(\'null\')) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return Long.parseLong(paramIdString);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (Throwable e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw new ");
    String _asImport_10 = this.asImport("java.lang.RuntimeException");
    _builder.append(_asImport_10, "\t\t\t\t");
    _builder.append("(\'parseHttpPostParamId(\' + paramIdString + \') failed to parse given ID to long.\',");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return paramId");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
