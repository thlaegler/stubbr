/*
 * generated by Xtext 2.10.0
 */
package com.laegler.stubbr.lang.generator

import com.laegler.stubbr.lang.genmodel.StubbrRegistry
import com.laegler.stubbr.lang.genmodel.TemplateProvider
import com.laegler.stubbr.lang.stubbrLang.Stubb
import javax.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGenerator2
import org.eclipse.xtext.generator.IGeneratorContext
import com.laegler.stubbr.lang.genmodel.Project
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StubbrLangGenerator implements IGenerator2 {

	@Inject StubbrRegistry stubbr

	@Inject ParentProjectGenerator parentProject
	@Inject CommonProjectGenerator commonProject
	@Inject ModelProjectGenerator modelProject
	@Inject PersistenceProjectGenerator persistenceProject
	@Inject BusinessProjectGenerator businessProject
	@Inject FacesProjectGenerator facesProject
	@Inject SwaggerProjectGenerator swaggerProject
	@Inject SoapServerProjectGenerator soapServerProject
	@Inject SoapClientProjectGenerator soapClientProject
	@Inject EarProjectGenerator earProject

	@Inject TemplateProvider templateProvider

	override void doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val stubb = input.contents.head as Stubb

		stubbr.projects = new ArrayList<Project>
		stubbr.fsa = fsa
		stubbr.stubb = stubb

		// Single generator projects
		stubbr?.projects?.addAll(#[
			parentProject.prepare,
			commonProject.prepare,
			modelProject.prepare,
			persistenceProject.prepare,
			businessProject.prepare,
			facesProject.prepare,
			soapServerProject.prepare,
			soapClientProject.prepare,
			earProject.prepare
		])

		stubbr?.projects?.addAll(swaggerProject.prepareMulti)

		// Generate files (flush)
		stubbr?.projects?.forEach [ project |
			project?.files?.forEach [ template |
				templateProvider.generateFile(template)
			]
		]

	// Tasks after Generation
	// doPushToRemote
	}

	override beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {}

	override afterGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {}

}
